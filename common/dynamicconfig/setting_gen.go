// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by cmd/tools/gendynamicconfig. DO NOT EDIT.

package dynamicconfig

import (
	"time"

	enumspb "go.temporal.io/api/enums/v1"
	enumsspb "go.temporal.io/server/api/enums/v1"
)

const TypeBool Type = 0 // go type: bool

type BoolSetting Setting[bool]

func (s *BoolSetting) GetKey() Key               { return s.Key }
func (s *BoolSetting) GetType() Type             { return s.Type }
func (s *BoolSetting) GetPrecedence() Precedence { return s.Precedence }
func (s *BoolSetting) GetDefault() any           { return s.Default }
func (s *BoolSetting) GetDescription() string    { return s.Description }

type (
	BoolPropertyFn                         func() bool
	BoolPropertyFnWithNamespaceFilter      func(namespace string) bool
	BoolPropertyFnWithNamespaceIDFilter    func(namespaceID string) bool
	BoolPropertyFnWithShardIDFilter        func(shardID int32) bool
	BoolPropertyFnWithTaskQueueInfoFilters func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) bool
	BoolPropertyFnWithTaskTypeFilter       func(task enumsspb.TaskType) bool
)

func (c *Collection) GetBoolProperty(s *BoolSetting) BoolPropertyFn {
	return func() bool {
		return matchAndConvert(
			c,
			(*Setting[bool])(s),
			globalPrecedence(),
			convertBool,
		)
	}
}

func (c *Collection) GetBoolPropertyFnWithNamespaceFilter(s *BoolSetting) BoolPropertyFnWithNamespaceFilter {
	return func(namespace string) bool {
		return matchAndConvert(
			c,
			(*Setting[bool])(s),
			namespacePrecedence(namespace),
			convertBool,
		)
	}
}

func (c *Collection) GetBoolPropertyFnWithNamespaceIDFilter(s *BoolSetting) BoolPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) bool {
		return matchAndConvert(
			c,
			(*Setting[bool])(s),
			namespaceIDPrecedence(namespaceID),
			convertBool,
		)
	}
}

func (c *Collection) GetBoolPropertyFilteredByTaskQueueInfo(s *BoolSetting) BoolPropertyFnWithTaskQueueInfoFilters {
	return func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) bool {
		return matchAndConvert(
			c,
			(*Setting[bool])(s),
			taskQueuePrecedence(namespace, taskQueue, taskType),
			convertBool,
		)
	}
}

func (c *Collection) GetBoolPropertyFilteredByShardID(s *BoolSetting) BoolPropertyFnWithShardIDFilter {
	return func(shardID int32) bool {
		return matchAndConvert(
			c,
			(*Setting[bool])(s),
			shardIDPrecedence(shardID),
			convertBool,
		)
	}
}

func GetBoolPropertyFn(value bool) BoolPropertyFn {
	return func() bool { return value }
}

func GetBoolPropertyFilteredByNamespace(value bool) BoolPropertyFnWithNamespaceFilter {
	return func(string) bool { return value }
}

func GetBoolPropertyFilteredByTaskQueueInfo(value bool) BoolPropertyFnWithTaskQueueInfoFilters {
	return func(string, string, enumspb.TaskQueueType) bool { return value }
}

const TypeInt Type = 1 // go type: int

type IntSetting Setting[int]

func (s *IntSetting) GetKey() Key               { return s.Key }
func (s *IntSetting) GetType() Type             { return s.Type }
func (s *IntSetting) GetPrecedence() Precedence { return s.Precedence }
func (s *IntSetting) GetDefault() any           { return s.Default }
func (s *IntSetting) GetDescription() string    { return s.Description }

type (
	IntPropertyFn                         func() int
	IntPropertyFnWithNamespaceFilter      func(namespace string) int
	IntPropertyFnWithNamespaceIDFilter    func(namespaceID string) int
	IntPropertyFnWithShardIDFilter        func(shardID int32) int
	IntPropertyFnWithTaskQueueInfoFilters func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) int
	IntPropertyFnWithTaskTypeFilter       func(task enumsspb.TaskType) int
)

func (c *Collection) GetIntProperty(s *IntSetting) IntPropertyFn {
	return func() int {
		return matchAndConvert(
			c,
			(*Setting[int])(s),
			globalPrecedence(),
			convertInt,
		)
	}
}

func (c *Collection) GetIntPropertyFnWithNamespaceFilter(s *IntSetting) IntPropertyFnWithNamespaceFilter {
	return func(namespace string) int {
		return matchAndConvert(
			c,
			(*Setting[int])(s),
			namespacePrecedence(namespace),
			convertInt,
		)
	}
}

func (c *Collection) GetIntPropertyFnWithNamespaceIDFilter(s *IntSetting) IntPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) int {
		return matchAndConvert(
			c,
			(*Setting[int])(s),
			namespaceIDPrecedence(namespaceID),
			convertInt,
		)
	}
}

func (c *Collection) GetIntPropertyFilteredByTaskQueueInfo(s *IntSetting) IntPropertyFnWithTaskQueueInfoFilters {
	return func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) int {
		return matchAndConvert(
			c,
			(*Setting[int])(s),
			taskQueuePrecedence(namespace, taskQueue, taskType),
			convertInt,
		)
	}
}

func (c *Collection) GetIntPropertyFilteredByShardID(s *IntSetting) IntPropertyFnWithShardIDFilter {
	return func(shardID int32) int {
		return matchAndConvert(
			c,
			(*Setting[int])(s),
			shardIDPrecedence(shardID),
			convertInt,
		)
	}
}

func GetIntPropertyFn(value int) IntPropertyFn {
	return func() int { return value }
}

func GetIntPropertyFilteredByNamespace(value int) IntPropertyFnWithNamespaceFilter {
	return func(string) int { return value }
}

func GetIntPropertyFilteredByTaskQueueInfo(value int) IntPropertyFnWithTaskQueueInfoFilters {
	return func(string, string, enumspb.TaskQueueType) int { return value }
}

const TypeFloat Type = 2 // go type: float64

type FloatSetting Setting[float64]

func (s *FloatSetting) GetKey() Key               { return s.Key }
func (s *FloatSetting) GetType() Type             { return s.Type }
func (s *FloatSetting) GetPrecedence() Precedence { return s.Precedence }
func (s *FloatSetting) GetDefault() any           { return s.Default }
func (s *FloatSetting) GetDescription() string    { return s.Description }

type (
	FloatPropertyFn                         func() float64
	FloatPropertyFnWithNamespaceFilter      func(namespace string) float64
	FloatPropertyFnWithNamespaceIDFilter    func(namespaceID string) float64
	FloatPropertyFnWithShardIDFilter        func(shardID int32) float64
	FloatPropertyFnWithTaskQueueInfoFilters func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) float64
	FloatPropertyFnWithTaskTypeFilter       func(task enumsspb.TaskType) float64
)

func (c *Collection) GetFloatProperty(s *FloatSetting) FloatPropertyFn {
	return func() float64 {
		return matchAndConvert(
			c,
			(*Setting[float64])(s),
			globalPrecedence(),
			convertFloat,
		)
	}
}

func (c *Collection) GetFloatPropertyFnWithNamespaceFilter(s *FloatSetting) FloatPropertyFnWithNamespaceFilter {
	return func(namespace string) float64 {
		return matchAndConvert(
			c,
			(*Setting[float64])(s),
			namespacePrecedence(namespace),
			convertFloat,
		)
	}
}

func (c *Collection) GetFloatPropertyFnWithNamespaceIDFilter(s *FloatSetting) FloatPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) float64 {
		return matchAndConvert(
			c,
			(*Setting[float64])(s),
			namespaceIDPrecedence(namespaceID),
			convertFloat,
		)
	}
}

func (c *Collection) GetFloatPropertyFilteredByTaskQueueInfo(s *FloatSetting) FloatPropertyFnWithTaskQueueInfoFilters {
	return func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) float64 {
		return matchAndConvert(
			c,
			(*Setting[float64])(s),
			taskQueuePrecedence(namespace, taskQueue, taskType),
			convertFloat,
		)
	}
}

func (c *Collection) GetFloatPropertyFilteredByShardID(s *FloatSetting) FloatPropertyFnWithShardIDFilter {
	return func(shardID int32) float64 {
		return matchAndConvert(
			c,
			(*Setting[float64])(s),
			shardIDPrecedence(shardID),
			convertFloat,
		)
	}
}

func GetFloatPropertyFn(value float64) FloatPropertyFn {
	return func() float64 { return value }
}

func GetFloatPropertyFilteredByNamespace(value float64) FloatPropertyFnWithNamespaceFilter {
	return func(string) float64 { return value }
}

func GetFloatPropertyFilteredByTaskQueueInfo(value float64) FloatPropertyFnWithTaskQueueInfoFilters {
	return func(string, string, enumspb.TaskQueueType) float64 { return value }
}

const TypeString Type = 3 // go type: string

type StringSetting Setting[string]

func (s *StringSetting) GetKey() Key               { return s.Key }
func (s *StringSetting) GetType() Type             { return s.Type }
func (s *StringSetting) GetPrecedence() Precedence { return s.Precedence }
func (s *StringSetting) GetDefault() any           { return s.Default }
func (s *StringSetting) GetDescription() string    { return s.Description }

type (
	StringPropertyFn                         func() string
	StringPropertyFnWithNamespaceFilter      func(namespace string) string
	StringPropertyFnWithNamespaceIDFilter    func(namespaceID string) string
	StringPropertyFnWithShardIDFilter        func(shardID int32) string
	StringPropertyFnWithTaskQueueInfoFilters func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) string
	StringPropertyFnWithTaskTypeFilter       func(task enumsspb.TaskType) string
)

func (c *Collection) GetStringProperty(s *StringSetting) StringPropertyFn {
	return func() string {
		return matchAndConvert(
			c,
			(*Setting[string])(s),
			globalPrecedence(),
			convertString,
		)
	}
}

func (c *Collection) GetStringPropertyFnWithNamespaceFilter(s *StringSetting) StringPropertyFnWithNamespaceFilter {
	return func(namespace string) string {
		return matchAndConvert(
			c,
			(*Setting[string])(s),
			namespacePrecedence(namespace),
			convertString,
		)
	}
}

func (c *Collection) GetStringPropertyFnWithNamespaceIDFilter(s *StringSetting) StringPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) string {
		return matchAndConvert(
			c,
			(*Setting[string])(s),
			namespaceIDPrecedence(namespaceID),
			convertString,
		)
	}
}

func (c *Collection) GetStringPropertyFilteredByTaskQueueInfo(s *StringSetting) StringPropertyFnWithTaskQueueInfoFilters {
	return func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) string {
		return matchAndConvert(
			c,
			(*Setting[string])(s),
			taskQueuePrecedence(namespace, taskQueue, taskType),
			convertString,
		)
	}
}

func (c *Collection) GetStringPropertyFilteredByShardID(s *StringSetting) StringPropertyFnWithShardIDFilter {
	return func(shardID int32) string {
		return matchAndConvert(
			c,
			(*Setting[string])(s),
			shardIDPrecedence(shardID),
			convertString,
		)
	}
}

func GetStringPropertyFn(value string) StringPropertyFn {
	return func() string { return value }
}

func GetStringPropertyFilteredByNamespace(value string) StringPropertyFnWithNamespaceFilter {
	return func(string) string { return value }
}

func GetStringPropertyFilteredByTaskQueueInfo(value string) StringPropertyFnWithTaskQueueInfoFilters {
	return func(string, string, enumspb.TaskQueueType) string { return value }
}

const TypeDuration Type = 4 // go type: time.Duration

type DurationSetting Setting[time.Duration]

func (s *DurationSetting) GetKey() Key               { return s.Key }
func (s *DurationSetting) GetType() Type             { return s.Type }
func (s *DurationSetting) GetPrecedence() Precedence { return s.Precedence }
func (s *DurationSetting) GetDefault() any           { return s.Default }
func (s *DurationSetting) GetDescription() string    { return s.Description }

type (
	DurationPropertyFn                         func() time.Duration
	DurationPropertyFnWithNamespaceFilter      func(namespace string) time.Duration
	DurationPropertyFnWithNamespaceIDFilter    func(namespaceID string) time.Duration
	DurationPropertyFnWithShardIDFilter        func(shardID int32) time.Duration
	DurationPropertyFnWithTaskQueueInfoFilters func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) time.Duration
	DurationPropertyFnWithTaskTypeFilter       func(task enumsspb.TaskType) time.Duration
)

func (c *Collection) GetDurationProperty(s *DurationSetting) DurationPropertyFn {
	return func() time.Duration {
		return matchAndConvert(
			c,
			(*Setting[time.Duration])(s),
			globalPrecedence(),
			convertDuration,
		)
	}
}

func (c *Collection) GetDurationPropertyFnWithNamespaceFilter(s *DurationSetting) DurationPropertyFnWithNamespaceFilter {
	return func(namespace string) time.Duration {
		return matchAndConvert(
			c,
			(*Setting[time.Duration])(s),
			namespacePrecedence(namespace),
			convertDuration,
		)
	}
}

func (c *Collection) GetDurationPropertyFnWithNamespaceIDFilter(s *DurationSetting) DurationPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) time.Duration {
		return matchAndConvert(
			c,
			(*Setting[time.Duration])(s),
			namespaceIDPrecedence(namespaceID),
			convertDuration,
		)
	}
}

func (c *Collection) GetDurationPropertyFilteredByTaskQueueInfo(s *DurationSetting) DurationPropertyFnWithTaskQueueInfoFilters {
	return func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) time.Duration {
		return matchAndConvert(
			c,
			(*Setting[time.Duration])(s),
			taskQueuePrecedence(namespace, taskQueue, taskType),
			convertDuration,
		)
	}
}

func (c *Collection) GetDurationPropertyFilteredByShardID(s *DurationSetting) DurationPropertyFnWithShardIDFilter {
	return func(shardID int32) time.Duration {
		return matchAndConvert(
			c,
			(*Setting[time.Duration])(s),
			shardIDPrecedence(shardID),
			convertDuration,
		)
	}
}

func GetDurationPropertyFn(value time.Duration) DurationPropertyFn {
	return func() time.Duration { return value }
}

func GetDurationPropertyFilteredByNamespace(value time.Duration) DurationPropertyFnWithNamespaceFilter {
	return func(string) time.Duration { return value }
}

func GetDurationPropertyFilteredByTaskQueueInfo(value time.Duration) DurationPropertyFnWithTaskQueueInfoFilters {
	return func(string, string, enumspb.TaskQueueType) time.Duration { return value }
}

const TypeMap Type = 5 // go type: map[string]any

type MapSetting Setting[map[string]any]

func (s *MapSetting) GetKey() Key               { return s.Key }
func (s *MapSetting) GetType() Type             { return s.Type }
func (s *MapSetting) GetPrecedence() Precedence { return s.Precedence }
func (s *MapSetting) GetDefault() any           { return s.Default }
func (s *MapSetting) GetDescription() string    { return s.Description }

type (
	MapPropertyFn                         func() map[string]any
	MapPropertyFnWithNamespaceFilter      func(namespace string) map[string]any
	MapPropertyFnWithNamespaceIDFilter    func(namespaceID string) map[string]any
	MapPropertyFnWithShardIDFilter        func(shardID int32) map[string]any
	MapPropertyFnWithTaskQueueInfoFilters func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) map[string]any
	MapPropertyFnWithTaskTypeFilter       func(task enumsspb.TaskType) map[string]any
)

func (c *Collection) GetMapProperty(s *MapSetting) MapPropertyFn {
	return func() map[string]any {
		return matchAndConvert(
			c,
			(*Setting[map[string]any])(s),
			globalPrecedence(),
			convertMap,
		)
	}
}

func (c *Collection) GetMapPropertyFnWithNamespaceFilter(s *MapSetting) MapPropertyFnWithNamespaceFilter {
	return func(namespace string) map[string]any {
		return matchAndConvert(
			c,
			(*Setting[map[string]any])(s),
			namespacePrecedence(namespace),
			convertMap,
		)
	}
}

func (c *Collection) GetMapPropertyFnWithNamespaceIDFilter(s *MapSetting) MapPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) map[string]any {
		return matchAndConvert(
			c,
			(*Setting[map[string]any])(s),
			namespaceIDPrecedence(namespaceID),
			convertMap,
		)
	}
}

func (c *Collection) GetMapPropertyFilteredByTaskQueueInfo(s *MapSetting) MapPropertyFnWithTaskQueueInfoFilters {
	return func(namespace string, taskQueue string, taskType enumspb.TaskQueueType) map[string]any {
		return matchAndConvert(
			c,
			(*Setting[map[string]any])(s),
			taskQueuePrecedence(namespace, taskQueue, taskType),
			convertMap,
		)
	}
}

func (c *Collection) GetMapPropertyFilteredByShardID(s *MapSetting) MapPropertyFnWithShardIDFilter {
	return func(shardID int32) map[string]any {
		return matchAndConvert(
			c,
			(*Setting[map[string]any])(s),
			shardIDPrecedence(shardID),
			convertMap,
		)
	}
}

func GetMapPropertyFn(value map[string]any) MapPropertyFn {
	return func() map[string]any { return value }
}

func GetMapPropertyFilteredByNamespace(value map[string]any) MapPropertyFnWithNamespaceFilter {
	return func(string) map[string]any { return value }
}

func GetMapPropertyFilteredByTaskQueueInfo(value map[string]any) MapPropertyFnWithTaskQueueInfoFilters {
	return func(string, string, enumspb.TaskQueueType) map[string]any { return value }
}
