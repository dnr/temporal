// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by cmd/tools/gendynamicconfig. DO NOT EDIT.

package dynamicconfig

import (
	"time"

	enumspb "go.temporal.io/api/enums/v1"
	enumsspb "go.temporal.io/server/api/enums/v1"
)

const TypeBool Type = 0 // go type: bool

const TypeInt Type = 1 // go type: int

const TypeFloat Type = 2 // go type: float64

const TypeString Type = 3 // go type: string

const TypeDuration Type = 4 // go type: time.Duration

const TypeMap Type = 5 // go type: map[string]any

const PrecedenceGlobal Precedence = 0

const PrecedenceNamespace Precedence = 1

const PrecedenceNamespaceID Precedence = 2

const PrecedenceTaskQueue Precedence = 3

const PrecedenceShardID Precedence = 4

const PrecedenceTaskType Precedence = 5

type BoolGlobalSetting Setting[bool, func()]

func NewBoolGlobalSetting(key Key, def bool, description string) BoolGlobalSetting {
	s := BoolGlobalSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewBoolGlobalSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) BoolGlobalSetting {
	s := BoolGlobalSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s BoolGlobalSetting) Key() Key               { return s.key }
func (s BoolGlobalSetting) Type() Type             { return TypeBool }
func (s BoolGlobalSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s BoolGlobalSetting) WithDefault(v bool) BoolGlobalSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFn func() bool

func (c *Collection) GetBool(s BoolGlobalSetting) BoolPropertyFn {
	return func() bool {
		return matchAndConvert(
			c,
			(Setting[bool, func()])(s),
			precedenceGlobal(),
			convertBool,
		)
	}
}

func GetBoolPropertyFn(value bool) BoolPropertyFn {
	return func() bool {
		return value
	}
}

type BoolNamespaceSetting Setting[bool, func(namespace string)]

func NewBoolNamespaceSetting(key Key, def bool, description string) BoolNamespaceSetting {
	s := BoolNamespaceSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewBoolNamespaceSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) BoolNamespaceSetting {
	s := BoolNamespaceSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s BoolNamespaceSetting) Key() Key               { return s.key }
func (s BoolNamespaceSetting) Type() Type             { return TypeBool }
func (s BoolNamespaceSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s BoolNamespaceSetting) WithDefault(v bool) BoolNamespaceSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithNamespaceFilter func(namespace string) bool

func (c *Collection) GetBoolByNamespace(s BoolNamespaceSetting) BoolPropertyFnWithNamespaceFilter {
	return func(namespace string) bool {
		return matchAndConvert(
			c,
			(Setting[bool, func(namespace string)])(s),
			precedenceNamespace(namespace),
			convertBool,
		)
	}
}

func GetBoolPropertyFnFilteredByNamespace(value bool) BoolPropertyFnWithNamespaceFilter {
	return func(namespace string) bool {
		return value
	}
}

type BoolNamespaceIDSetting Setting[bool, func(namespaceID string)]

func NewBoolNamespaceIDSetting(key Key, def bool, description string) BoolNamespaceIDSetting {
	s := BoolNamespaceIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewBoolNamespaceIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) BoolNamespaceIDSetting {
	s := BoolNamespaceIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s BoolNamespaceIDSetting) Key() Key               { return s.key }
func (s BoolNamespaceIDSetting) Type() Type             { return TypeBool }
func (s BoolNamespaceIDSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s BoolNamespaceIDSetting) WithDefault(v bool) BoolNamespaceIDSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithNamespaceIDFilter func(namespaceID string) bool

func (c *Collection) GetBoolByNamespaceID(s BoolNamespaceIDSetting) BoolPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) bool {
		return matchAndConvert(
			c,
			(Setting[bool, func(namespaceID string)])(s),
			precedenceNamespaceID(namespaceID),
			convertBool,
		)
	}
}

func GetBoolPropertyFnFilteredByNamespaceID(value bool) BoolPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) bool {
		return value
	}
}

type BoolTaskQueueSetting Setting[bool, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewBoolTaskQueueSetting(key Key, def bool, description string) BoolTaskQueueSetting {
	s := BoolTaskQueueSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewBoolTaskQueueSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) BoolTaskQueueSetting {
	s := BoolTaskQueueSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s BoolTaskQueueSetting) Key() Key               { return s.key }
func (s BoolTaskQueueSetting) Type() Type             { return TypeBool }
func (s BoolTaskQueueSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s BoolTaskQueueSetting) WithDefault(v bool) BoolTaskQueueSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) bool

func (c *Collection) GetBoolByTaskQueue(s BoolTaskQueueSetting) BoolPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) bool {
		return matchAndConvert(
			c,
			(Setting[bool, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)])(s),
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
			convertBool,
		)
	}
}

func GetBoolPropertyFnFilteredByTaskQueue(value bool) BoolPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) bool {
		return value
	}
}

type BoolShardIDSetting Setting[bool, func(shardID int32)]

func NewBoolShardIDSetting(key Key, def bool, description string) BoolShardIDSetting {
	s := BoolShardIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewBoolShardIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) BoolShardIDSetting {
	s := BoolShardIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s BoolShardIDSetting) Key() Key               { return s.key }
func (s BoolShardIDSetting) Type() Type             { return TypeBool }
func (s BoolShardIDSetting) Precedence() Precedence { return PrecedenceShardID }

func (s BoolShardIDSetting) WithDefault(v bool) BoolShardIDSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithShardIDFilter func(shardID int32) bool

func (c *Collection) GetBoolByShardID(s BoolShardIDSetting) BoolPropertyFnWithShardIDFilter {
	return func(shardID int32) bool {
		return matchAndConvert(
			c,
			(Setting[bool, func(shardID int32)])(s),
			precedenceShardID(shardID),
			convertBool,
		)
	}
}

func GetBoolPropertyFnFilteredByShardID(value bool) BoolPropertyFnWithShardIDFilter {
	return func(shardID int32) bool {
		return value
	}
}

type BoolTaskTypeSetting Setting[bool, func(taskType enumsspb.TaskType)]

func NewBoolTaskTypeSetting(key Key, def bool, description string) BoolTaskTypeSetting {
	s := BoolTaskTypeSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewBoolTaskTypeSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) BoolTaskTypeSetting {
	s := BoolTaskTypeSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s BoolTaskTypeSetting) Key() Key               { return s.key }
func (s BoolTaskTypeSetting) Type() Type             { return TypeBool }
func (s BoolTaskTypeSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s BoolTaskTypeSetting) WithDefault(v bool) BoolTaskTypeSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) bool

func (c *Collection) GetBoolByTaskType(s BoolTaskTypeSetting) BoolPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) bool {
		return matchAndConvert(
			c,
			(Setting[bool, func(taskType enumsspb.TaskType)])(s),
			precedenceTaskType(taskType),
			convertBool,
		)
	}
}

func GetBoolPropertyFnFilteredByTaskType(value bool) BoolPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) bool {
		return value
	}
}

type IntGlobalSetting Setting[int, func()]

func NewIntGlobalSetting(key Key, def int, description string) IntGlobalSetting {
	s := IntGlobalSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewIntGlobalSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) IntGlobalSetting {
	s := IntGlobalSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s IntGlobalSetting) Key() Key               { return s.key }
func (s IntGlobalSetting) Type() Type             { return TypeInt }
func (s IntGlobalSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s IntGlobalSetting) WithDefault(v int) IntGlobalSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFn func() int

func (c *Collection) GetInt(s IntGlobalSetting) IntPropertyFn {
	return func() int {
		return matchAndConvert(
			c,
			(Setting[int, func()])(s),
			precedenceGlobal(),
			convertInt,
		)
	}
}

func GetIntPropertyFn(value int) IntPropertyFn {
	return func() int {
		return value
	}
}

type IntNamespaceSetting Setting[int, func(namespace string)]

func NewIntNamespaceSetting(key Key, def int, description string) IntNamespaceSetting {
	s := IntNamespaceSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewIntNamespaceSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) IntNamespaceSetting {
	s := IntNamespaceSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s IntNamespaceSetting) Key() Key               { return s.key }
func (s IntNamespaceSetting) Type() Type             { return TypeInt }
func (s IntNamespaceSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s IntNamespaceSetting) WithDefault(v int) IntNamespaceSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithNamespaceFilter func(namespace string) int

func (c *Collection) GetIntByNamespace(s IntNamespaceSetting) IntPropertyFnWithNamespaceFilter {
	return func(namespace string) int {
		return matchAndConvert(
			c,
			(Setting[int, func(namespace string)])(s),
			precedenceNamespace(namespace),
			convertInt,
		)
	}
}

func GetIntPropertyFnFilteredByNamespace(value int) IntPropertyFnWithNamespaceFilter {
	return func(namespace string) int {
		return value
	}
}

type IntNamespaceIDSetting Setting[int, func(namespaceID string)]

func NewIntNamespaceIDSetting(key Key, def int, description string) IntNamespaceIDSetting {
	s := IntNamespaceIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewIntNamespaceIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) IntNamespaceIDSetting {
	s := IntNamespaceIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s IntNamespaceIDSetting) Key() Key               { return s.key }
func (s IntNamespaceIDSetting) Type() Type             { return TypeInt }
func (s IntNamespaceIDSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s IntNamespaceIDSetting) WithDefault(v int) IntNamespaceIDSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithNamespaceIDFilter func(namespaceID string) int

func (c *Collection) GetIntByNamespaceID(s IntNamespaceIDSetting) IntPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) int {
		return matchAndConvert(
			c,
			(Setting[int, func(namespaceID string)])(s),
			precedenceNamespaceID(namespaceID),
			convertInt,
		)
	}
}

func GetIntPropertyFnFilteredByNamespaceID(value int) IntPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) int {
		return value
	}
}

type IntTaskQueueSetting Setting[int, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewIntTaskQueueSetting(key Key, def int, description string) IntTaskQueueSetting {
	s := IntTaskQueueSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewIntTaskQueueSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) IntTaskQueueSetting {
	s := IntTaskQueueSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s IntTaskQueueSetting) Key() Key               { return s.key }
func (s IntTaskQueueSetting) Type() Type             { return TypeInt }
func (s IntTaskQueueSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s IntTaskQueueSetting) WithDefault(v int) IntTaskQueueSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) int

func (c *Collection) GetIntByTaskQueue(s IntTaskQueueSetting) IntPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) int {
		return matchAndConvert(
			c,
			(Setting[int, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)])(s),
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
			convertInt,
		)
	}
}

func GetIntPropertyFnFilteredByTaskQueue(value int) IntPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) int {
		return value
	}
}

type IntShardIDSetting Setting[int, func(shardID int32)]

func NewIntShardIDSetting(key Key, def int, description string) IntShardIDSetting {
	s := IntShardIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewIntShardIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) IntShardIDSetting {
	s := IntShardIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s IntShardIDSetting) Key() Key               { return s.key }
func (s IntShardIDSetting) Type() Type             { return TypeInt }
func (s IntShardIDSetting) Precedence() Precedence { return PrecedenceShardID }

func (s IntShardIDSetting) WithDefault(v int) IntShardIDSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithShardIDFilter func(shardID int32) int

func (c *Collection) GetIntByShardID(s IntShardIDSetting) IntPropertyFnWithShardIDFilter {
	return func(shardID int32) int {
		return matchAndConvert(
			c,
			(Setting[int, func(shardID int32)])(s),
			precedenceShardID(shardID),
			convertInt,
		)
	}
}

func GetIntPropertyFnFilteredByShardID(value int) IntPropertyFnWithShardIDFilter {
	return func(shardID int32) int {
		return value
	}
}

type IntTaskTypeSetting Setting[int, func(taskType enumsspb.TaskType)]

func NewIntTaskTypeSetting(key Key, def int, description string) IntTaskTypeSetting {
	s := IntTaskTypeSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewIntTaskTypeSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) IntTaskTypeSetting {
	s := IntTaskTypeSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s IntTaskTypeSetting) Key() Key               { return s.key }
func (s IntTaskTypeSetting) Type() Type             { return TypeInt }
func (s IntTaskTypeSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s IntTaskTypeSetting) WithDefault(v int) IntTaskTypeSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) int

func (c *Collection) GetIntByTaskType(s IntTaskTypeSetting) IntPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) int {
		return matchAndConvert(
			c,
			(Setting[int, func(taskType enumsspb.TaskType)])(s),
			precedenceTaskType(taskType),
			convertInt,
		)
	}
}

func GetIntPropertyFnFilteredByTaskType(value int) IntPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) int {
		return value
	}
}

type FloatGlobalSetting Setting[float64, func()]

func NewFloatGlobalSetting(key Key, def float64, description string) FloatGlobalSetting {
	s := FloatGlobalSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewFloatGlobalSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) FloatGlobalSetting {
	s := FloatGlobalSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s FloatGlobalSetting) Key() Key               { return s.key }
func (s FloatGlobalSetting) Type() Type             { return TypeFloat }
func (s FloatGlobalSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s FloatGlobalSetting) WithDefault(v float64) FloatGlobalSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFn func() float64

func (c *Collection) GetFloat(s FloatGlobalSetting) FloatPropertyFn {
	return func() float64 {
		return matchAndConvert(
			c,
			(Setting[float64, func()])(s),
			precedenceGlobal(),
			convertFloat,
		)
	}
}

func GetFloatPropertyFn(value float64) FloatPropertyFn {
	return func() float64 {
		return value
	}
}

type FloatNamespaceSetting Setting[float64, func(namespace string)]

func NewFloatNamespaceSetting(key Key, def float64, description string) FloatNamespaceSetting {
	s := FloatNamespaceSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewFloatNamespaceSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) FloatNamespaceSetting {
	s := FloatNamespaceSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s FloatNamespaceSetting) Key() Key               { return s.key }
func (s FloatNamespaceSetting) Type() Type             { return TypeFloat }
func (s FloatNamespaceSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s FloatNamespaceSetting) WithDefault(v float64) FloatNamespaceSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithNamespaceFilter func(namespace string) float64

func (c *Collection) GetFloatByNamespace(s FloatNamespaceSetting) FloatPropertyFnWithNamespaceFilter {
	return func(namespace string) float64 {
		return matchAndConvert(
			c,
			(Setting[float64, func(namespace string)])(s),
			precedenceNamespace(namespace),
			convertFloat,
		)
	}
}

func GetFloatPropertyFnFilteredByNamespace(value float64) FloatPropertyFnWithNamespaceFilter {
	return func(namespace string) float64 {
		return value
	}
}

type FloatNamespaceIDSetting Setting[float64, func(namespaceID string)]

func NewFloatNamespaceIDSetting(key Key, def float64, description string) FloatNamespaceIDSetting {
	s := FloatNamespaceIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewFloatNamespaceIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) FloatNamespaceIDSetting {
	s := FloatNamespaceIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s FloatNamespaceIDSetting) Key() Key               { return s.key }
func (s FloatNamespaceIDSetting) Type() Type             { return TypeFloat }
func (s FloatNamespaceIDSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s FloatNamespaceIDSetting) WithDefault(v float64) FloatNamespaceIDSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithNamespaceIDFilter func(namespaceID string) float64

func (c *Collection) GetFloatByNamespaceID(s FloatNamespaceIDSetting) FloatPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) float64 {
		return matchAndConvert(
			c,
			(Setting[float64, func(namespaceID string)])(s),
			precedenceNamespaceID(namespaceID),
			convertFloat,
		)
	}
}

func GetFloatPropertyFnFilteredByNamespaceID(value float64) FloatPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) float64 {
		return value
	}
}

type FloatTaskQueueSetting Setting[float64, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewFloatTaskQueueSetting(key Key, def float64, description string) FloatTaskQueueSetting {
	s := FloatTaskQueueSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewFloatTaskQueueSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) FloatTaskQueueSetting {
	s := FloatTaskQueueSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s FloatTaskQueueSetting) Key() Key               { return s.key }
func (s FloatTaskQueueSetting) Type() Type             { return TypeFloat }
func (s FloatTaskQueueSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s FloatTaskQueueSetting) WithDefault(v float64) FloatTaskQueueSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) float64

func (c *Collection) GetFloatByTaskQueue(s FloatTaskQueueSetting) FloatPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) float64 {
		return matchAndConvert(
			c,
			(Setting[float64, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)])(s),
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
			convertFloat,
		)
	}
}

func GetFloatPropertyFnFilteredByTaskQueue(value float64) FloatPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) float64 {
		return value
	}
}

type FloatShardIDSetting Setting[float64, func(shardID int32)]

func NewFloatShardIDSetting(key Key, def float64, description string) FloatShardIDSetting {
	s := FloatShardIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewFloatShardIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) FloatShardIDSetting {
	s := FloatShardIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s FloatShardIDSetting) Key() Key               { return s.key }
func (s FloatShardIDSetting) Type() Type             { return TypeFloat }
func (s FloatShardIDSetting) Precedence() Precedence { return PrecedenceShardID }

func (s FloatShardIDSetting) WithDefault(v float64) FloatShardIDSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithShardIDFilter func(shardID int32) float64

func (c *Collection) GetFloatByShardID(s FloatShardIDSetting) FloatPropertyFnWithShardIDFilter {
	return func(shardID int32) float64 {
		return matchAndConvert(
			c,
			(Setting[float64, func(shardID int32)])(s),
			precedenceShardID(shardID),
			convertFloat,
		)
	}
}

func GetFloatPropertyFnFilteredByShardID(value float64) FloatPropertyFnWithShardIDFilter {
	return func(shardID int32) float64 {
		return value
	}
}

type FloatTaskTypeSetting Setting[float64, func(taskType enumsspb.TaskType)]

func NewFloatTaskTypeSetting(key Key, def float64, description string) FloatTaskTypeSetting {
	s := FloatTaskTypeSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewFloatTaskTypeSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) FloatTaskTypeSetting {
	s := FloatTaskTypeSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s FloatTaskTypeSetting) Key() Key               { return s.key }
func (s FloatTaskTypeSetting) Type() Type             { return TypeFloat }
func (s FloatTaskTypeSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s FloatTaskTypeSetting) WithDefault(v float64) FloatTaskTypeSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) float64

func (c *Collection) GetFloatByTaskType(s FloatTaskTypeSetting) FloatPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) float64 {
		return matchAndConvert(
			c,
			(Setting[float64, func(taskType enumsspb.TaskType)])(s),
			precedenceTaskType(taskType),
			convertFloat,
		)
	}
}

func GetFloatPropertyFnFilteredByTaskType(value float64) FloatPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) float64 {
		return value
	}
}

type StringGlobalSetting Setting[string, func()]

func NewStringGlobalSetting(key Key, def string, description string) StringGlobalSetting {
	s := StringGlobalSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewStringGlobalSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) StringGlobalSetting {
	s := StringGlobalSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s StringGlobalSetting) Key() Key               { return s.key }
func (s StringGlobalSetting) Type() Type             { return TypeString }
func (s StringGlobalSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s StringGlobalSetting) WithDefault(v string) StringGlobalSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFn func() string

func (c *Collection) GetString(s StringGlobalSetting) StringPropertyFn {
	return func() string {
		return matchAndConvert(
			c,
			(Setting[string, func()])(s),
			precedenceGlobal(),
			convertString,
		)
	}
}

func GetStringPropertyFn(value string) StringPropertyFn {
	return func() string {
		return value
	}
}

type StringNamespaceSetting Setting[string, func(namespace string)]

func NewStringNamespaceSetting(key Key, def string, description string) StringNamespaceSetting {
	s := StringNamespaceSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewStringNamespaceSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) StringNamespaceSetting {
	s := StringNamespaceSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s StringNamespaceSetting) Key() Key               { return s.key }
func (s StringNamespaceSetting) Type() Type             { return TypeString }
func (s StringNamespaceSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s StringNamespaceSetting) WithDefault(v string) StringNamespaceSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithNamespaceFilter func(namespace string) string

func (c *Collection) GetStringByNamespace(s StringNamespaceSetting) StringPropertyFnWithNamespaceFilter {
	return func(namespace string) string {
		return matchAndConvert(
			c,
			(Setting[string, func(namespace string)])(s),
			precedenceNamespace(namespace),
			convertString,
		)
	}
}

func GetStringPropertyFnFilteredByNamespace(value string) StringPropertyFnWithNamespaceFilter {
	return func(namespace string) string {
		return value
	}
}

type StringNamespaceIDSetting Setting[string, func(namespaceID string)]

func NewStringNamespaceIDSetting(key Key, def string, description string) StringNamespaceIDSetting {
	s := StringNamespaceIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewStringNamespaceIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) StringNamespaceIDSetting {
	s := StringNamespaceIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s StringNamespaceIDSetting) Key() Key               { return s.key }
func (s StringNamespaceIDSetting) Type() Type             { return TypeString }
func (s StringNamespaceIDSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s StringNamespaceIDSetting) WithDefault(v string) StringNamespaceIDSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithNamespaceIDFilter func(namespaceID string) string

func (c *Collection) GetStringByNamespaceID(s StringNamespaceIDSetting) StringPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) string {
		return matchAndConvert(
			c,
			(Setting[string, func(namespaceID string)])(s),
			precedenceNamespaceID(namespaceID),
			convertString,
		)
	}
}

func GetStringPropertyFnFilteredByNamespaceID(value string) StringPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) string {
		return value
	}
}

type StringTaskQueueSetting Setting[string, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewStringTaskQueueSetting(key Key, def string, description string) StringTaskQueueSetting {
	s := StringTaskQueueSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewStringTaskQueueSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) StringTaskQueueSetting {
	s := StringTaskQueueSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s StringTaskQueueSetting) Key() Key               { return s.key }
func (s StringTaskQueueSetting) Type() Type             { return TypeString }
func (s StringTaskQueueSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s StringTaskQueueSetting) WithDefault(v string) StringTaskQueueSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) string

func (c *Collection) GetStringByTaskQueue(s StringTaskQueueSetting) StringPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) string {
		return matchAndConvert(
			c,
			(Setting[string, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)])(s),
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
			convertString,
		)
	}
}

func GetStringPropertyFnFilteredByTaskQueue(value string) StringPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) string {
		return value
	}
}

type StringShardIDSetting Setting[string, func(shardID int32)]

func NewStringShardIDSetting(key Key, def string, description string) StringShardIDSetting {
	s := StringShardIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewStringShardIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) StringShardIDSetting {
	s := StringShardIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s StringShardIDSetting) Key() Key               { return s.key }
func (s StringShardIDSetting) Type() Type             { return TypeString }
func (s StringShardIDSetting) Precedence() Precedence { return PrecedenceShardID }

func (s StringShardIDSetting) WithDefault(v string) StringShardIDSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithShardIDFilter func(shardID int32) string

func (c *Collection) GetStringByShardID(s StringShardIDSetting) StringPropertyFnWithShardIDFilter {
	return func(shardID int32) string {
		return matchAndConvert(
			c,
			(Setting[string, func(shardID int32)])(s),
			precedenceShardID(shardID),
			convertString,
		)
	}
}

func GetStringPropertyFnFilteredByShardID(value string) StringPropertyFnWithShardIDFilter {
	return func(shardID int32) string {
		return value
	}
}

type StringTaskTypeSetting Setting[string, func(taskType enumsspb.TaskType)]

func NewStringTaskTypeSetting(key Key, def string, description string) StringTaskTypeSetting {
	s := StringTaskTypeSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewStringTaskTypeSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) StringTaskTypeSetting {
	s := StringTaskTypeSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s StringTaskTypeSetting) Key() Key               { return s.key }
func (s StringTaskTypeSetting) Type() Type             { return TypeString }
func (s StringTaskTypeSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s StringTaskTypeSetting) WithDefault(v string) StringTaskTypeSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) string

func (c *Collection) GetStringByTaskType(s StringTaskTypeSetting) StringPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) string {
		return matchAndConvert(
			c,
			(Setting[string, func(taskType enumsspb.TaskType)])(s),
			precedenceTaskType(taskType),
			convertString,
		)
	}
}

func GetStringPropertyFnFilteredByTaskType(value string) StringPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) string {
		return value
	}
}

type DurationGlobalSetting Setting[time.Duration, func()]

func NewDurationGlobalSetting(key Key, def time.Duration, description string) DurationGlobalSetting {
	s := DurationGlobalSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewDurationGlobalSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) DurationGlobalSetting {
	s := DurationGlobalSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s DurationGlobalSetting) Key() Key               { return s.key }
func (s DurationGlobalSetting) Type() Type             { return TypeDuration }
func (s DurationGlobalSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s DurationGlobalSetting) WithDefault(v time.Duration) DurationGlobalSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFn func() time.Duration

func (c *Collection) GetDuration(s DurationGlobalSetting) DurationPropertyFn {
	return func() time.Duration {
		return matchAndConvert(
			c,
			(Setting[time.Duration, func()])(s),
			precedenceGlobal(),
			convertDuration,
		)
	}
}

func GetDurationPropertyFn(value time.Duration) DurationPropertyFn {
	return func() time.Duration {
		return value
	}
}

type DurationNamespaceSetting Setting[time.Duration, func(namespace string)]

func NewDurationNamespaceSetting(key Key, def time.Duration, description string) DurationNamespaceSetting {
	s := DurationNamespaceSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewDurationNamespaceSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) DurationNamespaceSetting {
	s := DurationNamespaceSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s DurationNamespaceSetting) Key() Key               { return s.key }
func (s DurationNamespaceSetting) Type() Type             { return TypeDuration }
func (s DurationNamespaceSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s DurationNamespaceSetting) WithDefault(v time.Duration) DurationNamespaceSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithNamespaceFilter func(namespace string) time.Duration

func (c *Collection) GetDurationByNamespace(s DurationNamespaceSetting) DurationPropertyFnWithNamespaceFilter {
	return func(namespace string) time.Duration {
		return matchAndConvert(
			c,
			(Setting[time.Duration, func(namespace string)])(s),
			precedenceNamespace(namespace),
			convertDuration,
		)
	}
}

func GetDurationPropertyFnFilteredByNamespace(value time.Duration) DurationPropertyFnWithNamespaceFilter {
	return func(namespace string) time.Duration {
		return value
	}
}

type DurationNamespaceIDSetting Setting[time.Duration, func(namespaceID string)]

func NewDurationNamespaceIDSetting(key Key, def time.Duration, description string) DurationNamespaceIDSetting {
	s := DurationNamespaceIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewDurationNamespaceIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) DurationNamespaceIDSetting {
	s := DurationNamespaceIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s DurationNamespaceIDSetting) Key() Key               { return s.key }
func (s DurationNamespaceIDSetting) Type() Type             { return TypeDuration }
func (s DurationNamespaceIDSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s DurationNamespaceIDSetting) WithDefault(v time.Duration) DurationNamespaceIDSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithNamespaceIDFilter func(namespaceID string) time.Duration

func (c *Collection) GetDurationByNamespaceID(s DurationNamespaceIDSetting) DurationPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) time.Duration {
		return matchAndConvert(
			c,
			(Setting[time.Duration, func(namespaceID string)])(s),
			precedenceNamespaceID(namespaceID),
			convertDuration,
		)
	}
}

func GetDurationPropertyFnFilteredByNamespaceID(value time.Duration) DurationPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) time.Duration {
		return value
	}
}

type DurationTaskQueueSetting Setting[time.Duration, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewDurationTaskQueueSetting(key Key, def time.Duration, description string) DurationTaskQueueSetting {
	s := DurationTaskQueueSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewDurationTaskQueueSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) DurationTaskQueueSetting {
	s := DurationTaskQueueSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s DurationTaskQueueSetting) Key() Key               { return s.key }
func (s DurationTaskQueueSetting) Type() Type             { return TypeDuration }
func (s DurationTaskQueueSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s DurationTaskQueueSetting) WithDefault(v time.Duration) DurationTaskQueueSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) time.Duration

func (c *Collection) GetDurationByTaskQueue(s DurationTaskQueueSetting) DurationPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) time.Duration {
		return matchAndConvert(
			c,
			(Setting[time.Duration, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)])(s),
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
			convertDuration,
		)
	}
}

func GetDurationPropertyFnFilteredByTaskQueue(value time.Duration) DurationPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) time.Duration {
		return value
	}
}

type DurationShardIDSetting Setting[time.Duration, func(shardID int32)]

func NewDurationShardIDSetting(key Key, def time.Duration, description string) DurationShardIDSetting {
	s := DurationShardIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewDurationShardIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) DurationShardIDSetting {
	s := DurationShardIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s DurationShardIDSetting) Key() Key               { return s.key }
func (s DurationShardIDSetting) Type() Type             { return TypeDuration }
func (s DurationShardIDSetting) Precedence() Precedence { return PrecedenceShardID }

func (s DurationShardIDSetting) WithDefault(v time.Duration) DurationShardIDSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithShardIDFilter func(shardID int32) time.Duration

func (c *Collection) GetDurationByShardID(s DurationShardIDSetting) DurationPropertyFnWithShardIDFilter {
	return func(shardID int32) time.Duration {
		return matchAndConvert(
			c,
			(Setting[time.Duration, func(shardID int32)])(s),
			precedenceShardID(shardID),
			convertDuration,
		)
	}
}

func GetDurationPropertyFnFilteredByShardID(value time.Duration) DurationPropertyFnWithShardIDFilter {
	return func(shardID int32) time.Duration {
		return value
	}
}

type DurationTaskTypeSetting Setting[time.Duration, func(taskType enumsspb.TaskType)]

func NewDurationTaskTypeSetting(key Key, def time.Duration, description string) DurationTaskTypeSetting {
	s := DurationTaskTypeSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewDurationTaskTypeSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) DurationTaskTypeSetting {
	s := DurationTaskTypeSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s DurationTaskTypeSetting) Key() Key               { return s.key }
func (s DurationTaskTypeSetting) Type() Type             { return TypeDuration }
func (s DurationTaskTypeSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s DurationTaskTypeSetting) WithDefault(v time.Duration) DurationTaskTypeSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) time.Duration

func (c *Collection) GetDurationByTaskType(s DurationTaskTypeSetting) DurationPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) time.Duration {
		return matchAndConvert(
			c,
			(Setting[time.Duration, func(taskType enumsspb.TaskType)])(s),
			precedenceTaskType(taskType),
			convertDuration,
		)
	}
}

func GetDurationPropertyFnFilteredByTaskType(value time.Duration) DurationPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) time.Duration {
		return value
	}
}

type MapGlobalSetting Setting[map[string]any, func()]

func NewMapGlobalSetting(key Key, def map[string]any, description string) MapGlobalSetting {
	s := MapGlobalSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewMapGlobalSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) MapGlobalSetting {
	s := MapGlobalSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s MapGlobalSetting) Key() Key               { return s.key }
func (s MapGlobalSetting) Type() Type             { return TypeMap }
func (s MapGlobalSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s MapGlobalSetting) WithDefault(v map[string]any) MapGlobalSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFn func() map[string]any

func (c *Collection) GetMap(s MapGlobalSetting) MapPropertyFn {
	return func() map[string]any {
		return matchAndConvert(
			c,
			(Setting[map[string]any, func()])(s),
			precedenceGlobal(),
			convertMap,
		)
	}
}

func GetMapPropertyFn(value map[string]any) MapPropertyFn {
	return func() map[string]any {
		return value
	}
}

type MapNamespaceSetting Setting[map[string]any, func(namespace string)]

func NewMapNamespaceSetting(key Key, def map[string]any, description string) MapNamespaceSetting {
	s := MapNamespaceSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewMapNamespaceSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) MapNamespaceSetting {
	s := MapNamespaceSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s MapNamespaceSetting) Key() Key               { return s.key }
func (s MapNamespaceSetting) Type() Type             { return TypeMap }
func (s MapNamespaceSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s MapNamespaceSetting) WithDefault(v map[string]any) MapNamespaceSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithNamespaceFilter func(namespace string) map[string]any

func (c *Collection) GetMapByNamespace(s MapNamespaceSetting) MapPropertyFnWithNamespaceFilter {
	return func(namespace string) map[string]any {
		return matchAndConvert(
			c,
			(Setting[map[string]any, func(namespace string)])(s),
			precedenceNamespace(namespace),
			convertMap,
		)
	}
}

func GetMapPropertyFnFilteredByNamespace(value map[string]any) MapPropertyFnWithNamespaceFilter {
	return func(namespace string) map[string]any {
		return value
	}
}

type MapNamespaceIDSetting Setting[map[string]any, func(namespaceID string)]

func NewMapNamespaceIDSetting(key Key, def map[string]any, description string) MapNamespaceIDSetting {
	s := MapNamespaceIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewMapNamespaceIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) MapNamespaceIDSetting {
	s := MapNamespaceIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s MapNamespaceIDSetting) Key() Key               { return s.key }
func (s MapNamespaceIDSetting) Type() Type             { return TypeMap }
func (s MapNamespaceIDSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s MapNamespaceIDSetting) WithDefault(v map[string]any) MapNamespaceIDSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithNamespaceIDFilter func(namespaceID string) map[string]any

func (c *Collection) GetMapByNamespaceID(s MapNamespaceIDSetting) MapPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) map[string]any {
		return matchAndConvert(
			c,
			(Setting[map[string]any, func(namespaceID string)])(s),
			precedenceNamespaceID(namespaceID),
			convertMap,
		)
	}
}

func GetMapPropertyFnFilteredByNamespaceID(value map[string]any) MapPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) map[string]any {
		return value
	}
}

type MapTaskQueueSetting Setting[map[string]any, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewMapTaskQueueSetting(key Key, def map[string]any, description string) MapTaskQueueSetting {
	s := MapTaskQueueSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewMapTaskQueueSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) MapTaskQueueSetting {
	s := MapTaskQueueSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s MapTaskQueueSetting) Key() Key               { return s.key }
func (s MapTaskQueueSetting) Type() Type             { return TypeMap }
func (s MapTaskQueueSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s MapTaskQueueSetting) WithDefault(v map[string]any) MapTaskQueueSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) map[string]any

func (c *Collection) GetMapByTaskQueue(s MapTaskQueueSetting) MapPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) map[string]any {
		return matchAndConvert(
			c,
			(Setting[map[string]any, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)])(s),
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
			convertMap,
		)
	}
}

func GetMapPropertyFnFilteredByTaskQueue(value map[string]any) MapPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) map[string]any {
		return value
	}
}

type MapShardIDSetting Setting[map[string]any, func(shardID int32)]

func NewMapShardIDSetting(key Key, def map[string]any, description string) MapShardIDSetting {
	s := MapShardIDSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewMapShardIDSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) MapShardIDSetting {
	s := MapShardIDSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s MapShardIDSetting) Key() Key               { return s.key }
func (s MapShardIDSetting) Type() Type             { return TypeMap }
func (s MapShardIDSetting) Precedence() Precedence { return PrecedenceShardID }

func (s MapShardIDSetting) WithDefault(v map[string]any) MapShardIDSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithShardIDFilter func(shardID int32) map[string]any

func (c *Collection) GetMapByShardID(s MapShardIDSetting) MapPropertyFnWithShardIDFilter {
	return func(shardID int32) map[string]any {
		return matchAndConvert(
			c,
			(Setting[map[string]any, func(shardID int32)])(s),
			precedenceShardID(shardID),
			convertMap,
		)
	}
}

func GetMapPropertyFnFilteredByShardID(value map[string]any) MapPropertyFnWithShardIDFilter {
	return func(shardID int32) map[string]any {
		return value
	}
}

type MapTaskTypeSetting Setting[map[string]any, func(taskType enumsspb.TaskType)]

func NewMapTaskTypeSetting(key Key, def map[string]any, description string) MapTaskTypeSetting {
	s := MapTaskTypeSetting{
		key:         key,
		def:         def,
		description: description,
	}
	register(s)
	return s
}

func NewMapTaskTypeSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) MapTaskTypeSetting {
	s := MapTaskTypeSetting{
		key:         key,
		cdef:        cdef,
		description: description,
	}
	register(s)
	return s
}

func (s MapTaskTypeSetting) Key() Key               { return s.key }
func (s MapTaskTypeSetting) Type() Type             { return TypeMap }
func (s MapTaskTypeSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s MapTaskTypeSetting) WithDefault(v map[string]any) MapTaskTypeSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) map[string]any

func (c *Collection) GetMapByTaskType(s MapTaskTypeSetting) MapPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) map[string]any {
		return matchAndConvert(
			c,
			(Setting[map[string]any, func(taskType enumsspb.TaskType)])(s),
			precedenceTaskType(taskType),
			convertMap,
		)
	}
}

func GetMapPropertyFnFilteredByTaskType(value map[string]any) MapPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) map[string]any {
		return value
	}
}
