// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/schedule/v1/message.proto

package schedule

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	v11 "go.temporal.io/api/common/v1"
	v1 "go.temporal.io/api/enums/v1"
	v12 "go.temporal.io/api/failure/v1"
	v13 "go.temporal.io/api/schedule/v1"
	v14 "go.temporal.io/api/workflowservice/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BufferedStart struct {
	// Nominal (pre-jitter) and Actual (post-jitter) time of action
	NominalTime *time.Time `protobuf:"bytes,1,opt,name=nominal_time,json=nominalTime,proto3,stdtime" json:"nominal_time,omitempty"`
	ActualTime  *time.Time `protobuf:"bytes,2,opt,name=actual_time,json=actualTime,proto3,stdtime" json:"actual_time,omitempty"`
	// Overridden overlap policy
	OverlapPolicy v1.ScheduleOverlapPolicy `protobuf:"varint,3,opt,name=overlap_policy,json=overlapPolicy,proto3,enum=temporal.api.enums.v1.ScheduleOverlapPolicy" json:"overlap_policy,omitempty"`
	// Trigger-immediately or backfill
	Manual bool `protobuf:"varint,4,opt,name=manual,proto3" json:"manual,omitempty"`
}

func (m *BufferedStart) Reset()      { *m = BufferedStart{} }
func (*BufferedStart) ProtoMessage() {}
func (*BufferedStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{0}
}
func (m *BufferedStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BufferedStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BufferedStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BufferedStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferedStart.Merge(m, src)
}
func (m *BufferedStart) XXX_Size() int {
	return m.Size()
}
func (m *BufferedStart) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferedStart.DiscardUnknown(m)
}

var xxx_messageInfo_BufferedStart proto.InternalMessageInfo

func (m *BufferedStart) GetNominalTime() *time.Time {
	if m != nil {
		return m.NominalTime
	}
	return nil
}

func (m *BufferedStart) GetActualTime() *time.Time {
	if m != nil {
		return m.ActualTime
	}
	return nil
}

func (m *BufferedStart) GetOverlapPolicy() v1.ScheduleOverlapPolicy {
	if m != nil {
		return m.OverlapPolicy
	}
	return v1.SCHEDULE_OVERLAP_POLICY_UNSPECIFIED
}

func (m *BufferedStart) GetManual() bool {
	if m != nil {
		return m.Manual
	}
	return false
}

type InternalState struct {
	Namespace         string           `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceId       string           `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	LastProcessedTime *time.Time       `protobuf:"bytes,3,opt,name=last_processed_time,json=lastProcessedTime,proto3,stdtime" json:"last_processed_time,omitempty"`
	BufferedStarts    []*BufferedStart `protobuf:"bytes,4,rep,name=buffered_starts,json=bufferedStarts,proto3" json:"buffered_starts,omitempty"`
	// last completion/failure
	LastCompletionResult *v11.Payloads `protobuf:"bytes,5,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	ContinuedFailure     *v12.Failure  `protobuf:"bytes,6,opt,name=continued_failure,json=continuedFailure,proto3" json:"continued_failure,omitempty"`
	// conflict token is implemented as simple sequence number
	ConflictToken []byte `protobuf:"bytes,7,opt,name=conflict_token,json=conflictToken,proto3" json:"conflict_token,omitempty"`
}

func (m *InternalState) Reset()      { *m = InternalState{} }
func (*InternalState) ProtoMessage() {}
func (*InternalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{1}
}
func (m *InternalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalState.Merge(m, src)
}
func (m *InternalState) XXX_Size() int {
	return m.Size()
}
func (m *InternalState) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalState.DiscardUnknown(m)
}

var xxx_messageInfo_InternalState proto.InternalMessageInfo

func (m *InternalState) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *InternalState) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *InternalState) GetLastProcessedTime() *time.Time {
	if m != nil {
		return m.LastProcessedTime
	}
	return nil
}

func (m *InternalState) GetBufferedStarts() []*BufferedStart {
	if m != nil {
		return m.BufferedStarts
	}
	return nil
}

func (m *InternalState) GetLastCompletionResult() *v11.Payloads {
	if m != nil {
		return m.LastCompletionResult
	}
	return nil
}

func (m *InternalState) GetContinuedFailure() *v12.Failure {
	if m != nil {
		return m.ContinuedFailure
	}
	return nil
}

func (m *InternalState) GetConflictToken() []byte {
	if m != nil {
		return m.ConflictToken
	}
	return nil
}

type StartScheduleArgs struct {
	Schedule     *v13.Schedule      `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Info         *v13.ScheduleInfo  `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	InitialPatch *v13.SchedulePatch `protobuf:"bytes,3,opt,name=initial_patch,json=initialPatch,proto3" json:"initial_patch,omitempty"`
	State        *InternalState     `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *StartScheduleArgs) Reset()      { *m = StartScheduleArgs{} }
func (*StartScheduleArgs) ProtoMessage() {}
func (*StartScheduleArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{2}
}
func (m *StartScheduleArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartScheduleArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartScheduleArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartScheduleArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartScheduleArgs.Merge(m, src)
}
func (m *StartScheduleArgs) XXX_Size() int {
	return m.Size()
}
func (m *StartScheduleArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_StartScheduleArgs.DiscardUnknown(m)
}

var xxx_messageInfo_StartScheduleArgs proto.InternalMessageInfo

func (m *StartScheduleArgs) GetSchedule() *v13.Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *StartScheduleArgs) GetInfo() *v13.ScheduleInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *StartScheduleArgs) GetInitialPatch() *v13.SchedulePatch {
	if m != nil {
		return m.InitialPatch
	}
	return nil
}

func (m *StartScheduleArgs) GetState() *InternalState {
	if m != nil {
		return m.State
	}
	return nil
}

type FullUpdateRequest struct {
	Schedule      *v13.Schedule `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	ConflictToken []byte        `protobuf:"bytes,2,opt,name=conflict_token,json=conflictToken,proto3" json:"conflict_token,omitempty"`
}

func (m *FullUpdateRequest) Reset()      { *m = FullUpdateRequest{} }
func (*FullUpdateRequest) ProtoMessage() {}
func (*FullUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{3}
}
func (m *FullUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullUpdateRequest.Merge(m, src)
}
func (m *FullUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *FullUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FullUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FullUpdateRequest proto.InternalMessageInfo

func (m *FullUpdateRequest) GetSchedule() *v13.Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *FullUpdateRequest) GetConflictToken() []byte {
	if m != nil {
		return m.ConflictToken
	}
	return nil
}

type RefreshRequest struct {
	// List of workflow ids that are completed now
	WorkflowId []string `protobuf:"bytes,1,rep,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (m *RefreshRequest) Reset()      { *m = RefreshRequest{} }
func (*RefreshRequest) ProtoMessage() {}
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{4}
}
func (m *RefreshRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshRequest.Merge(m, src)
}
func (m *RefreshRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefreshRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshRequest proto.InternalMessageInfo

func (m *RefreshRequest) GetWorkflowId() []string {
	if m != nil {
		return m.WorkflowId
	}
	return nil
}

type DescribeResponse struct {
	Schedule      *v13.Schedule     `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Info          *v13.ScheduleInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	ConflictToken []byte            `protobuf:"bytes,3,opt,name=conflict_token,json=conflictToken,proto3" json:"conflict_token,omitempty"`
}

func (m *DescribeResponse) Reset()      { *m = DescribeResponse{} }
func (*DescribeResponse) ProtoMessage() {}
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{5}
}
func (m *DescribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeResponse.Merge(m, src)
}
func (m *DescribeResponse) XXX_Size() int {
	return m.Size()
}
func (m *DescribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeResponse proto.InternalMessageInfo

func (m *DescribeResponse) GetSchedule() *v13.Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *DescribeResponse) GetInfo() *v13.ScheduleInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *DescribeResponse) GetConflictToken() []byte {
	if m != nil {
		return m.ConflictToken
	}
	return nil
}

type WatchWorkflowRequest struct {
	Namespace   string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceId string                 `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Execution   *v11.WorkflowExecution `protobuf:"bytes,3,opt,name=execution,proto3" json:"execution,omitempty"`
	LongPoll    bool                   `protobuf:"varint,4,opt,name=long_poll,json=longPoll,proto3" json:"long_poll,omitempty"`
}

func (m *WatchWorkflowRequest) Reset()      { *m = WatchWorkflowRequest{} }
func (*WatchWorkflowRequest) ProtoMessage() {}
func (*WatchWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{6}
}
func (m *WatchWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchWorkflowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchWorkflowRequest.Merge(m, src)
}
func (m *WatchWorkflowRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchWorkflowRequest proto.InternalMessageInfo

func (m *WatchWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *WatchWorkflowRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *WatchWorkflowRequest) GetExecution() *v11.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *WatchWorkflowRequest) GetLongPoll() bool {
	if m != nil {
		return m.LongPoll
	}
	return false
}

type WatchWorkflowResponse struct {
	Status v1.WorkflowExecutionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=temporal.api.enums.v1.WorkflowExecutionStatus" json:"status,omitempty"`
	// Types that are valid to be assigned to ResultFailure:
	//	*WatchWorkflowResponse_Result
	//	*WatchWorkflowResponse_Failure
	ResultFailure isWatchWorkflowResponse_ResultFailure `protobuf_oneof:"result_failure"`
}

func (m *WatchWorkflowResponse) Reset()      { *m = WatchWorkflowResponse{} }
func (*WatchWorkflowResponse) ProtoMessage() {}
func (*WatchWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{7}
}
func (m *WatchWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchWorkflowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchWorkflowResponse.Merge(m, src)
}
func (m *WatchWorkflowResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchWorkflowResponse proto.InternalMessageInfo

type isWatchWorkflowResponse_ResultFailure interface {
	isWatchWorkflowResponse_ResultFailure()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WatchWorkflowResponse_Result struct {
	Result *v11.Payloads `protobuf:"bytes,2,opt,name=result,proto3,oneof" json:"result,omitempty"`
}
type WatchWorkflowResponse_Failure struct {
	Failure *v12.Failure `protobuf:"bytes,3,opt,name=failure,proto3,oneof" json:"failure,omitempty"`
}

func (*WatchWorkflowResponse_Result) isWatchWorkflowResponse_ResultFailure()  {}
func (*WatchWorkflowResponse_Failure) isWatchWorkflowResponse_ResultFailure() {}

func (m *WatchWorkflowResponse) GetResultFailure() isWatchWorkflowResponse_ResultFailure {
	if m != nil {
		return m.ResultFailure
	}
	return nil
}

func (m *WatchWorkflowResponse) GetStatus() v1.WorkflowExecutionStatus {
	if m != nil {
		return m.Status
	}
	return v1.WORKFLOW_EXECUTION_STATUS_UNSPECIFIED
}

func (m *WatchWorkflowResponse) GetResult() *v11.Payloads {
	if x, ok := m.GetResultFailure().(*WatchWorkflowResponse_Result); ok {
		return x.Result
	}
	return nil
}

func (m *WatchWorkflowResponse) GetFailure() *v12.Failure {
	if x, ok := m.GetResultFailure().(*WatchWorkflowResponse_Failure); ok {
		return x.Failure
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WatchWorkflowResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WatchWorkflowResponse_Result)(nil),
		(*WatchWorkflowResponse_Failure)(nil),
	}
}

type StartWorkflowRequest struct {
	NamespaceId          string                             `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Request              *v14.StartWorkflowExecutionRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	StartTime            *time.Time                         `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty"`
	LastCompletionResult *v11.Payloads                      `protobuf:"bytes,4,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	ContinuedFailure     *v12.Failure                       `protobuf:"bytes,5,opt,name=continued_failure,json=continuedFailure,proto3" json:"continued_failure,omitempty"`
}

func (m *StartWorkflowRequest) Reset()      { *m = StartWorkflowRequest{} }
func (*StartWorkflowRequest) ProtoMessage() {}
func (*StartWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{8}
}
func (m *StartWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartWorkflowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartWorkflowRequest.Merge(m, src)
}
func (m *StartWorkflowRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartWorkflowRequest proto.InternalMessageInfo

func (m *StartWorkflowRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *StartWorkflowRequest) GetRequest() *v14.StartWorkflowExecutionRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *StartWorkflowRequest) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StartWorkflowRequest) GetLastCompletionResult() *v11.Payloads {
	if m != nil {
		return m.LastCompletionResult
	}
	return nil
}

func (m *StartWorkflowRequest) GetContinuedFailure() *v12.Failure {
	if m != nil {
		return m.ContinuedFailure
	}
	return nil
}

type StartWorkflowResponse struct {
	RunId         string     `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	RealStartTime *time.Time `protobuf:"bytes,2,opt,name=real_start_time,json=realStartTime,proto3,stdtime" json:"real_start_time,omitempty"`
}

func (m *StartWorkflowResponse) Reset()      { *m = StartWorkflowResponse{} }
func (*StartWorkflowResponse) ProtoMessage() {}
func (*StartWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{9}
}
func (m *StartWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartWorkflowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartWorkflowResponse.Merge(m, src)
}
func (m *StartWorkflowResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartWorkflowResponse proto.InternalMessageInfo

func (m *StartWorkflowResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *StartWorkflowResponse) GetRealStartTime() *time.Time {
	if m != nil {
		return m.RealStartTime
	}
	return nil
}

type CancelWorkflowRequest struct {
	Namespace   string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceId string                 `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	RequestId   string                 `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Identity    string                 `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	Execution   *v11.WorkflowExecution `protobuf:"bytes,5,opt,name=execution,proto3" json:"execution,omitempty"`
}

func (m *CancelWorkflowRequest) Reset()      { *m = CancelWorkflowRequest{} }
func (*CancelWorkflowRequest) ProtoMessage() {}
func (*CancelWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{10}
}
func (m *CancelWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelWorkflowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelWorkflowRequest.Merge(m, src)
}
func (m *CancelWorkflowRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelWorkflowRequest proto.InternalMessageInfo

func (m *CancelWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CancelWorkflowRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *CancelWorkflowRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *CancelWorkflowRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *CancelWorkflowRequest) GetExecution() *v11.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

type TerminateWorkflowRequest struct {
	Namespace   string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceId string                 `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Identity    string                 `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Execution   *v11.WorkflowExecution `protobuf:"bytes,4,opt,name=execution,proto3" json:"execution,omitempty"`
	Reason      string                 `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *TerminateWorkflowRequest) Reset()      { *m = TerminateWorkflowRequest{} }
func (*TerminateWorkflowRequest) ProtoMessage() {}
func (*TerminateWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6461b6986ba20ee7, []int{11}
}
func (m *TerminateWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminateWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminateWorkflowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminateWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminateWorkflowRequest.Merge(m, src)
}
func (m *TerminateWorkflowRequest) XXX_Size() int {
	return m.Size()
}
func (m *TerminateWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminateWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TerminateWorkflowRequest proto.InternalMessageInfo

func (m *TerminateWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *TerminateWorkflowRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *TerminateWorkflowRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *TerminateWorkflowRequest) GetExecution() *v11.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *TerminateWorkflowRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*BufferedStart)(nil), "temporal.server.api.schedule.v1.BufferedStart")
	proto.RegisterType((*InternalState)(nil), "temporal.server.api.schedule.v1.InternalState")
	proto.RegisterType((*StartScheduleArgs)(nil), "temporal.server.api.schedule.v1.StartScheduleArgs")
	proto.RegisterType((*FullUpdateRequest)(nil), "temporal.server.api.schedule.v1.FullUpdateRequest")
	proto.RegisterType((*RefreshRequest)(nil), "temporal.server.api.schedule.v1.RefreshRequest")
	proto.RegisterType((*DescribeResponse)(nil), "temporal.server.api.schedule.v1.DescribeResponse")
	proto.RegisterType((*WatchWorkflowRequest)(nil), "temporal.server.api.schedule.v1.WatchWorkflowRequest")
	proto.RegisterType((*WatchWorkflowResponse)(nil), "temporal.server.api.schedule.v1.WatchWorkflowResponse")
	proto.RegisterType((*StartWorkflowRequest)(nil), "temporal.server.api.schedule.v1.StartWorkflowRequest")
	proto.RegisterType((*StartWorkflowResponse)(nil), "temporal.server.api.schedule.v1.StartWorkflowResponse")
	proto.RegisterType((*CancelWorkflowRequest)(nil), "temporal.server.api.schedule.v1.CancelWorkflowRequest")
	proto.RegisterType((*TerminateWorkflowRequest)(nil), "temporal.server.api.schedule.v1.TerminateWorkflowRequest")
}

func init() {
	proto.RegisterFile("temporal/server/api/schedule/v1/message.proto", fileDescriptor_6461b6986ba20ee7)
}

var fileDescriptor_6461b6986ba20ee7 = []byte{
	// 1120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xda, 0x8e, 0x1b, 0x3f, 0xc7, 0x6e, 0xb3, 0x34, 0x95, 0x15, 0x60, 0xe3, 0x5a, 0xb4,
	0x18, 0x09, 0xd6, 0x4a, 0x91, 0x38, 0x14, 0x54, 0xd4, 0xb4, 0x84, 0x58, 0x02, 0x61, 0x8d, 0x03,
	0x41, 0x5c, 0xac, 0xc9, 0xee, 0xd8, 0x59, 0x75, 0x3c, 0xb3, 0xec, 0xec, 0xa6, 0x0d, 0x27, 0x0e,
	0x7c, 0x80, 0x7e, 0x07, 0x2e, 0x7c, 0x01, 0x8e, 0xdc, 0xe1, 0x96, 0x63, 0x0e, 0x48, 0x10, 0xe7,
	0x82, 0xc4, 0xa5, 0x77, 0x2e, 0x68, 0x66, 0x67, 0x1c, 0xff, 0x49, 0x1a, 0xd3, 0x44, 0xe2, 0xe6,
	0x79, 0xfb, 0x7e, 0xef, 0xcd, 0x7b, 0xef, 0xf7, 0x7e, 0xbb, 0x86, 0xf7, 0x62, 0x32, 0x08, 0x79,
	0x84, 0x69, 0x53, 0x90, 0x68, 0x9f, 0x44, 0x4d, 0x1c, 0x06, 0x4d, 0xe1, 0xed, 0x11, 0x3f, 0xa1,
	0xa4, 0xb9, 0xbf, 0xde, 0x1c, 0x10, 0x21, 0x70, 0x9f, 0xb8, 0x61, 0xc4, 0x63, 0x6e, 0xaf, 0x19,
	0x77, 0x37, 0x75, 0x77, 0x71, 0x18, 0xb8, 0xc6, 0xdd, 0xdd, 0x5f, 0x5f, 0x7d, 0x6b, 0x14, 0x4f,
	0x06, 0xf2, 0xf8, 0x60, 0xc0, 0xd9, 0x4c, 0x98, 0xd5, 0x3b, 0x13, 0x5e, 0x3d, 0x1c, 0xd0, 0x24,
	0x9a, 0xcd, 0x36, 0x15, 0x8c, 0xb0, 0x64, 0x20, 0xa4, 0xd3, 0x28, 0xdf, 0x4b, 0xbd, 0x9e, 0xf2,
	0xe8, 0x49, 0x8f, 0xf2, 0xa7, 0xda, 0xeb, 0xee, 0x84, 0xd7, 0xb9, 0x15, 0xae, 0x7e, 0x30, 0xe1,
	0x67, 0x82, 0xc8, 0x6a, 0x03, 0x4f, 0xb9, 0x47, 0xe4, 0xdb, 0x84, 0x88, 0xb8, 0x1b, 0x11, 0x11,
	0x72, 0x26, 0x0c, 0xce, 0xe9, 0x73, 0xde, 0xa7, 0xa4, 0xa9, 0x4e, 0xbb, 0x49, 0xaf, 0xe9, 0x27,
	0x11, 0x8e, 0x03, 0xce, 0xf4, 0xf3, 0xb5, 0xe9, 0xe7, 0x71, 0x30, 0x20, 0x22, 0xc6, 0x83, 0x50,
	0x3b, 0xdc, 0xf6, 0x49, 0x48, 0x98, 0x4f, 0x98, 0x17, 0x10, 0xd1, 0xec, 0xf3, 0x3e, 0x57, 0x76,
	0xf5, 0x2b, 0x75, 0xa9, 0xff, 0x90, 0x85, 0xf2, 0x46, 0xd2, 0xeb, 0x91, 0x88, 0xf8, 0x9d, 0x18,
	0x47, 0xb1, 0xfd, 0x08, 0x96, 0x18, 0x1f, 0x04, 0x0c, 0xd3, 0xae, 0x8c, 0x57, 0xb5, 0x6a, 0x56,
	0xa3, 0x74, 0x6f, 0xd5, 0x4d, 0x93, 0xb9, 0x26, 0x99, 0xbb, 0x6d, 0x92, 0x6d, 0xe4, 0x9f, 0xff,
	0xb1, 0x66, 0xa1, 0x92, 0x46, 0x49, 0xbb, 0xfd, 0x10, 0x4a, 0xd8, 0x8b, 0x13, 0x13, 0x23, 0x3b,
	0x67, 0x0c, 0x48, 0x41, 0x2a, 0x44, 0x07, 0x2a, 0x7c, 0x9f, 0x44, 0x14, 0x87, 0xdd, 0x90, 0xd3,
	0xc0, 0x3b, 0xa8, 0xe6, 0x6a, 0x56, 0xa3, 0x72, 0xef, 0x5d, 0x77, 0x44, 0x18, 0xc9, 0x14, 0x35,
	0x1c, 0x77, 0x7f, 0xdd, 0xed, 0xe8, 0xfe, 0x7f, 0x91, 0x82, 0xda, 0x0a, 0x83, 0xca, 0x7c, 0xfc,
	0x68, 0xdf, 0x82, 0xc2, 0x00, 0xb3, 0x04, 0xd3, 0x6a, 0xbe, 0x66, 0x35, 0x16, 0x91, 0x3e, 0xd5,
	0x7f, 0xcb, 0x41, 0xb9, 0xc5, 0x62, 0x12, 0x31, 0x4c, 0x3b, 0x31, 0x8e, 0x89, 0xfd, 0x06, 0x14,
	0x19, 0x1e, 0x10, 0x11, 0x62, 0x2f, 0xed, 0x41, 0x11, 0x9d, 0x1a, 0xec, 0xdb, 0xb0, 0x34, 0x3a,
	0x74, 0x03, 0x5f, 0x15, 0x58, 0x44, 0xa5, 0x91, 0xad, 0xe5, 0xdb, 0x6d, 0x78, 0x8d, 0x62, 0x11,
	0x77, 0xc3, 0x88, 0x7b, 0x44, 0x08, 0xe2, 0xa7, 0xad, 0xc8, 0xcd, 0xd9, 0x8a, 0x65, 0x09, 0x6e,
	0x1b, 0xac, 0xea, 0xc8, 0x0e, 0x5c, 0xdf, 0xd5, 0xa3, 0xea, 0x0a, 0x39, 0x2b, 0x51, 0xcd, 0xd7,
	0x72, 0x8d, 0xd2, 0x3d, 0xd7, 0xbd, 0x60, 0x87, 0xdc, 0x89, 0x11, 0xa3, 0xca, 0xee, 0xf8, 0x51,
	0xd8, 0x5f, 0xc1, 0x2d, 0x75, 0x55, 0x8f, 0x0f, 0x42, 0x4a, 0x24, 0xc3, 0x24, 0x15, 0x13, 0x1a,
	0x57, 0x17, 0xd4, 0x6d, 0x6b, 0x93, 0x2d, 0x4f, 0x57, 0x50, 0x86, 0x6d, 0xe3, 0x03, 0xca, 0xb1,
	0x2f, 0xd0, 0x4d, 0x89, 0x7f, 0x34, 0x82, 0x23, 0x85, 0xb6, 0x3f, 0x87, 0x65, 0x8f, 0xb3, 0x38,
	0x60, 0x09, 0xf1, 0xbb, 0x7a, 0x25, 0xab, 0x85, 0xb3, 0x42, 0xea, 0x87, 0x32, 0xe6, 0x66, 0xfa,
	0x13, 0xdd, 0x18, 0x41, 0xb5, 0xc5, 0xbe, 0x03, 0x15, 0x8f, 0xb3, 0x1e, 0x0d, 0xbc, 0xb8, 0x1b,
	0xf3, 0x27, 0x84, 0x55, 0xaf, 0xd5, 0xac, 0xc6, 0x12, 0x2a, 0x1b, 0xeb, 0xb6, 0x34, 0xd6, 0x7f,
	0xcc, 0xc2, 0xb2, 0x2a, 0xcc, 0x30, 0xe2, 0x61, 0xd4, 0x17, 0xf6, 0x03, 0x58, 0x34, 0x0d, 0xd1,
	0x94, 0xae, 0x4f, 0x5e, 0x61, 0xbc, 0x5d, 0x06, 0x89, 0x46, 0x18, 0xfb, 0x3e, 0xe4, 0x03, 0xd6,
	0xe3, 0x9a, 0xca, 0x77, 0x2f, 0xc6, 0xb6, 0x58, 0x8f, 0x23, 0x85, 0xb1, 0x3f, 0x83, 0x72, 0xc0,
	0x82, 0x38, 0xc0, 0xb4, 0x1b, 0xe2, 0xd8, 0xdb, 0xd3, 0x24, 0x78, 0xfb, 0xe2, 0x20, 0x6d, 0xe9,
	0x8e, 0x96, 0x34, 0x5a, 0x9d, 0xec, 0xc7, 0xb0, 0x20, 0x24, 0x45, 0x15, 0x85, 0xe7, 0x19, 0xfe,
	0x04, 0xb1, 0x51, 0x0a, 0xae, 0x7f, 0x07, 0xcb, 0x9b, 0x09, 0xa5, 0x5f, 0x86, 0xbe, 0x34, 0xa6,
	0x02, 0x74, 0xe9, 0x26, 0xcd, 0x4e, 0x28, 0x7b, 0xd6, 0x84, 0xd6, 0xa1, 0x82, 0x48, 0x2f, 0x22,
	0x62, 0xcf, 0x24, 0x5e, 0x83, 0x92, 0xd1, 0x45, 0xb9, 0x4e, 0x56, 0x2d, 0xd7, 0x28, 0x22, 0x30,
	0xa6, 0x96, 0x5f, 0xff, 0xd9, 0x82, 0x1b, 0x8f, 0x89, 0xf0, 0xa2, 0x60, 0x97, 0x20, 0x2d, 0x93,
	0xff, 0xeb, 0x4c, 0x67, 0x4b, 0xcd, 0x9d, 0x55, 0xea, 0x2f, 0x16, 0xdc, 0xdc, 0x91, 0x63, 0xdb,
	0xd1, 0xb5, 0x98, 0x8a, 0x2f, 0xad, 0x2f, 0x9f, 0x42, 0x91, 0x3c, 0x23, 0x5e, 0x22, 0xf7, 0x4d,
	0x13, 0xea, 0x9d, 0xf3, 0xf6, 0xd4, 0x24, 0xff, 0xc4, 0x00, 0xd0, 0x29, 0xd6, 0x7e, 0x1d, 0x8a,
	0x94, 0xb3, 0xbe, 0x54, 0x59, 0x23, 0x8b, 0x8b, 0xd2, 0xd0, 0xe6, 0x94, 0xd6, 0xff, 0xb6, 0x60,
	0x65, 0xea, 0xfe, 0xba, 0xf9, 0x9b, 0x50, 0x90, 0x4c, 0x4a, 0x84, 0xba, 0x7d, 0x65, 0x9c, 0x87,
	0x13, 0xba, 0x3c, 0x93, 0xbb, 0xa3, 0x50, 0x48, 0xa3, 0xed, 0xfb, 0x50, 0xd0, 0x62, 0x93, 0x9d,
	0x4f, 0x6c, 0xb6, 0x32, 0x48, 0x23, 0xec, 0x8f, 0xe0, 0x9a, 0x91, 0x95, 0xdc, 0x7c, 0xb2, 0xb2,
	0x95, 0x41, 0x06, 0xb2, 0x71, 0x03, 0x2a, 0x69, 0x1c, 0xa3, 0x4d, 0xf5, 0x7f, 0xb2, 0x70, 0x53,
	0x49, 0xc7, 0xf4, 0xb4, 0xa6, 0xe7, 0x61, 0xcd, 0xce, 0xe3, 0x6b, 0xb8, 0xa6, 0xdf, 0xe3, 0xba,
	0x90, 0x07, 0x93, 0x77, 0x99, 0x7a, 0xef, 0x2b, 0x5a, 0x8d, 0xa7, 0x3a, 0x9d, 0x4d, 0x1a, 0x05,
	0x99, 0x70, 0xf6, 0xc7, 0x00, 0x4a, 0xee, 0xff, 0xdb, 0x0b, 0xa4, 0xa8, 0x30, 0xea, 0xc5, 0x71,
	0xbe, 0xbe, 0xe7, 0xaf, 0x5e, 0xdf, 0x17, 0x5e, 0x55, 0xdf, 0xeb, 0xcf, 0x60, 0x65, 0xaa, 0xf9,
	0x9a, 0x6a, 0x2b, 0x50, 0x88, 0x12, 0x76, 0xda, 0xf7, 0x85, 0x28, 0x61, 0x2d, 0xdf, 0xde, 0x82,
	0xeb, 0x11, 0xc1, 0xb4, 0x3b, 0xd6, 0x9c, 0x79, 0x3f, 0x34, 0xca, 0x12, 0xd8, 0x31, 0x0d, 0xaa,
	0xff, 0x6e, 0xc1, 0xca, 0x23, 0xcc, 0x3c, 0x42, 0xaf, 0x7c, 0x4d, 0xdf, 0x04, 0x30, 0x9f, 0x77,
	0x81, 0xaf, 0x86, 0x57, 0x44, 0x45, 0x6d, 0x69, 0xf9, 0xf6, 0x2a, 0x2c, 0x06, 0x3e, 0x61, 0x71,
	0x10, 0x1f, 0xa8, 0x61, 0x14, 0xd1, 0xe8, 0x3c, 0xb9, 0xe1, 0x0b, 0xaf, 0xbe, 0xe1, 0xf5, 0x23,
	0x0b, 0xaa, 0xdb, 0x24, 0x92, 0x9f, 0x67, 0x31, 0xb9, 0xf2, 0x0a, 0xc7, 0x4b, 0xc8, 0xbd, 0xac,
	0x84, 0xfc, 0x25, 0x44, 0xea, 0x96, 0x54, 0x09, 0x2c, 0x74, 0x23, 0x8a, 0x48, 0x9f, 0x36, 0xfc,
	0xc3, 0x63, 0x27, 0x73, 0x74, 0xec, 0x64, 0x5e, 0x1c, 0x3b, 0xd6, 0xf7, 0x43, 0xc7, 0xfa, 0x69,
	0xe8, 0x58, 0xbf, 0x0e, 0x1d, 0xeb, 0x70, 0xe8, 0x58, 0x7f, 0x0e, 0x1d, 0xeb, 0xaf, 0xa1, 0x93,
	0x79, 0x31, 0x74, 0xac, 0xe7, 0x27, 0x4e, 0xe6, 0xf0, 0xc4, 0xc9, 0x1c, 0x9d, 0x38, 0x99, 0x6f,
	0xdc, 0x3e, 0x3f, 0xbd, 0x45, 0xc0, 0xcf, 0xf9, 0xa3, 0xf2, 0xa1, 0xf9, 0xbd, 0x5b, 0x50, 0x44,
	0x7a, 0xff, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xe7, 0x84, 0xa6, 0xdb, 0x0c, 0x00, 0x00,
}

func (this *BufferedStart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BufferedStart)
	if !ok {
		that2, ok := that.(BufferedStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NominalTime == nil {
		if this.NominalTime != nil {
			return false
		}
	} else if !this.NominalTime.Equal(*that1.NominalTime) {
		return false
	}
	if that1.ActualTime == nil {
		if this.ActualTime != nil {
			return false
		}
	} else if !this.ActualTime.Equal(*that1.ActualTime) {
		return false
	}
	if this.OverlapPolicy != that1.OverlapPolicy {
		return false
	}
	if this.Manual != that1.Manual {
		return false
	}
	return true
}
func (this *InternalState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InternalState)
	if !ok {
		that2, ok := that.(InternalState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if that1.LastProcessedTime == nil {
		if this.LastProcessedTime != nil {
			return false
		}
	} else if !this.LastProcessedTime.Equal(*that1.LastProcessedTime) {
		return false
	}
	if len(this.BufferedStarts) != len(that1.BufferedStarts) {
		return false
	}
	for i := range this.BufferedStarts {
		if !this.BufferedStarts[i].Equal(that1.BufferedStarts[i]) {
			return false
		}
	}
	if !this.LastCompletionResult.Equal(that1.LastCompletionResult) {
		return false
	}
	if !this.ContinuedFailure.Equal(that1.ContinuedFailure) {
		return false
	}
	if !bytes.Equal(this.ConflictToken, that1.ConflictToken) {
		return false
	}
	return true
}
func (this *StartScheduleArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartScheduleArgs)
	if !ok {
		that2, ok := that.(StartScheduleArgs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Schedule.Equal(that1.Schedule) {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.InitialPatch.Equal(that1.InitialPatch) {
		return false
	}
	if !this.State.Equal(that1.State) {
		return false
	}
	return true
}
func (this *FullUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FullUpdateRequest)
	if !ok {
		that2, ok := that.(FullUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Schedule.Equal(that1.Schedule) {
		return false
	}
	if !bytes.Equal(this.ConflictToken, that1.ConflictToken) {
		return false
	}
	return true
}
func (this *RefreshRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshRequest)
	if !ok {
		that2, ok := that.(RefreshRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.WorkflowId) != len(that1.WorkflowId) {
		return false
	}
	for i := range this.WorkflowId {
		if this.WorkflowId[i] != that1.WorkflowId[i] {
			return false
		}
	}
	return true
}
func (this *DescribeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeResponse)
	if !ok {
		that2, ok := that.(DescribeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Schedule.Equal(that1.Schedule) {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !bytes.Equal(this.ConflictToken, that1.ConflictToken) {
		return false
	}
	return true
}
func (this *WatchWorkflowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchWorkflowRequest)
	if !ok {
		that2, ok := that.(WatchWorkflowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if this.LongPoll != that1.LongPoll {
		return false
	}
	return true
}
func (this *WatchWorkflowResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchWorkflowResponse)
	if !ok {
		that2, ok := that.(WatchWorkflowResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if that1.ResultFailure == nil {
		if this.ResultFailure != nil {
			return false
		}
	} else if this.ResultFailure == nil {
		return false
	} else if !this.ResultFailure.Equal(that1.ResultFailure) {
		return false
	}
	return true
}
func (this *WatchWorkflowResponse_Result) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchWorkflowResponse_Result)
	if !ok {
		that2, ok := that.(WatchWorkflowResponse_Result)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *WatchWorkflowResponse_Failure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchWorkflowResponse_Failure)
	if !ok {
		that2, ok := that.(WatchWorkflowResponse_Failure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *StartWorkflowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartWorkflowRequest)
	if !ok {
		that2, ok := that.(StartWorkflowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if that1.StartTime == nil {
		if this.StartTime != nil {
			return false
		}
	} else if !this.StartTime.Equal(*that1.StartTime) {
		return false
	}
	if !this.LastCompletionResult.Equal(that1.LastCompletionResult) {
		return false
	}
	if !this.ContinuedFailure.Equal(that1.ContinuedFailure) {
		return false
	}
	return true
}
func (this *StartWorkflowResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartWorkflowResponse)
	if !ok {
		that2, ok := that.(StartWorkflowResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if that1.RealStartTime == nil {
		if this.RealStartTime != nil {
			return false
		}
	} else if !this.RealStartTime.Equal(*that1.RealStartTime) {
		return false
	}
	return true
}
func (this *CancelWorkflowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelWorkflowRequest)
	if !ok {
		that2, ok := that.(CancelWorkflowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	return true
}
func (this *TerminateWorkflowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TerminateWorkflowRequest)
	if !ok {
		that2, ok := that.(TerminateWorkflowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *BufferedStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schedule.BufferedStart{")
	s = append(s, "NominalTime: "+fmt.Sprintf("%#v", this.NominalTime)+",\n")
	s = append(s, "ActualTime: "+fmt.Sprintf("%#v", this.ActualTime)+",\n")
	s = append(s, "OverlapPolicy: "+fmt.Sprintf("%#v", this.OverlapPolicy)+",\n")
	s = append(s, "Manual: "+fmt.Sprintf("%#v", this.Manual)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InternalState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schedule.InternalState{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "LastProcessedTime: "+fmt.Sprintf("%#v", this.LastProcessedTime)+",\n")
	if this.BufferedStarts != nil {
		s = append(s, "BufferedStarts: "+fmt.Sprintf("%#v", this.BufferedStarts)+",\n")
	}
	if this.LastCompletionResult != nil {
		s = append(s, "LastCompletionResult: "+fmt.Sprintf("%#v", this.LastCompletionResult)+",\n")
	}
	if this.ContinuedFailure != nil {
		s = append(s, "ContinuedFailure: "+fmt.Sprintf("%#v", this.ContinuedFailure)+",\n")
	}
	s = append(s, "ConflictToken: "+fmt.Sprintf("%#v", this.ConflictToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartScheduleArgs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schedule.StartScheduleArgs{")
	if this.Schedule != nil {
		s = append(s, "Schedule: "+fmt.Sprintf("%#v", this.Schedule)+",\n")
	}
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.InitialPatch != nil {
		s = append(s, "InitialPatch: "+fmt.Sprintf("%#v", this.InitialPatch)+",\n")
	}
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FullUpdateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schedule.FullUpdateRequest{")
	if this.Schedule != nil {
		s = append(s, "Schedule: "+fmt.Sprintf("%#v", this.Schedule)+",\n")
	}
	s = append(s, "ConflictToken: "+fmt.Sprintf("%#v", this.ConflictToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefreshRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schedule.RefreshRequest{")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schedule.DescribeResponse{")
	if this.Schedule != nil {
		s = append(s, "Schedule: "+fmt.Sprintf("%#v", this.Schedule)+",\n")
	}
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "ConflictToken: "+fmt.Sprintf("%#v", this.ConflictToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WatchWorkflowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schedule.WatchWorkflowRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "LongPoll: "+fmt.Sprintf("%#v", this.LongPoll)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WatchWorkflowResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schedule.WatchWorkflowResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.ResultFailure != nil {
		s = append(s, "ResultFailure: "+fmt.Sprintf("%#v", this.ResultFailure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WatchWorkflowResponse_Result) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.WatchWorkflowResponse_Result{` +
		`Result:` + fmt.Sprintf("%#v", this.Result) + `}`}, ", ")
	return s
}
func (this *WatchWorkflowResponse_Failure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.WatchWorkflowResponse_Failure{` +
		`Failure:` + fmt.Sprintf("%#v", this.Failure) + `}`}, ", ")
	return s
}
func (this *StartWorkflowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&schedule.StartWorkflowRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	if this.LastCompletionResult != nil {
		s = append(s, "LastCompletionResult: "+fmt.Sprintf("%#v", this.LastCompletionResult)+",\n")
	}
	if this.ContinuedFailure != nil {
		s = append(s, "ContinuedFailure: "+fmt.Sprintf("%#v", this.ContinuedFailure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartWorkflowResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schedule.StartWorkflowResponse{")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "RealStartTime: "+fmt.Sprintf("%#v", this.RealStartTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelWorkflowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&schedule.CancelWorkflowRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TerminateWorkflowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&schedule.TerminateWorkflowRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BufferedStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferedStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BufferedStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Manual {
		i--
		if m.Manual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.OverlapPolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.OverlapPolicy))
		i--
		dAtA[i] = 0x18
	}
	if m.ActualTime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ActualTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ActualTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintMessage(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x12
	}
	if m.NominalTime != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.NominalTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.NominalTime):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintMessage(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConflictToken) > 0 {
		i -= len(m.ConflictToken)
		copy(dAtA[i:], m.ConflictToken)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ConflictToken)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ContinuedFailure != nil {
		{
			size, err := m.ContinuedFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastCompletionResult != nil {
		{
			size, err := m.LastCompletionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BufferedStarts) > 0 {
		for iNdEx := len(m.BufferedStarts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BufferedStarts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LastProcessedTime != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastProcessedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastProcessedTime):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintMessage(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartScheduleArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartScheduleArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartScheduleArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.InitialPatch != nil {
		{
			size, err := m.InitialPatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FullUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConflictToken) > 0 {
		i -= len(m.ConflictToken)
		copy(dAtA[i:], m.ConflictToken)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ConflictToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RefreshRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkflowId) > 0 {
		for iNdEx := len(m.WorkflowId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkflowId[iNdEx])
			copy(dAtA[i:], m.WorkflowId[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DescribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConflictToken) > 0 {
		i -= len(m.ConflictToken)
		copy(dAtA[i:], m.ConflictToken)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ConflictToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchWorkflowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchWorkflowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchWorkflowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LongPoll {
		i--
		if m.LongPoll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchWorkflowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchWorkflowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchWorkflowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultFailure != nil {
		{
			size := m.ResultFailure.Size()
			i -= size
			if _, err := m.ResultFailure.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WatchWorkflowResponse_Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchWorkflowResponse_Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WatchWorkflowResponse_Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchWorkflowResponse_Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *StartWorkflowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartWorkflowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartWorkflowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContinuedFailure != nil {
		{
			size, err := m.ContinuedFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LastCompletionResult != nil {
		{
			size, err := m.LastCompletionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartTime != nil {
		n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err18 != nil {
			return 0, err18
		}
		i -= n18
		i = encodeVarintMessage(dAtA, i, uint64(n18))
		i--
		dAtA[i] = 0x1a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartWorkflowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartWorkflowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartWorkflowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RealStartTime != nil {
		n20, err20 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.RealStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.RealStartTime):])
		if err20 != nil {
			return 0, err20
		}
		i -= n20
		i = encodeVarintMessage(dAtA, i, uint64(n20))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelWorkflowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelWorkflowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelWorkflowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TerminateWorkflowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminateWorkflowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminateWorkflowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BufferedStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominalTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.NominalTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ActualTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ActualTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.OverlapPolicy != 0 {
		n += 1 + sovMessage(uint64(m.OverlapPolicy))
	}
	if m.Manual {
		n += 2
	}
	return n
}

func (m *InternalState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastProcessedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastProcessedTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.BufferedStarts) > 0 {
		for _, e := range m.BufferedStarts {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.LastCompletionResult != nil {
		l = m.LastCompletionResult.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ContinuedFailure != nil {
		l = m.ContinuedFailure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ConflictToken)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *StartScheduleArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitialPatch != nil {
		l = m.InitialPatch.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *FullUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ConflictToken)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RefreshRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WorkflowId) > 0 {
		for _, s := range m.WorkflowId {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *DescribeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ConflictToken)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WatchWorkflowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LongPoll {
		n += 2
	}
	return n
}

func (m *WatchWorkflowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	if m.ResultFailure != nil {
		n += m.ResultFailure.Size()
	}
	return n
}

func (m *WatchWorkflowResponse_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *WatchWorkflowResponse_Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *StartWorkflowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastCompletionResult != nil {
		l = m.LastCompletionResult.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ContinuedFailure != nil {
		l = m.ContinuedFailure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *StartWorkflowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.RealStartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.RealStartTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CancelWorkflowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TerminateWorkflowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BufferedStart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BufferedStart{`,
		`NominalTime:` + strings.Replace(fmt.Sprintf("%v", this.NominalTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`ActualTime:` + strings.Replace(fmt.Sprintf("%v", this.ActualTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`OverlapPolicy:` + fmt.Sprintf("%v", this.OverlapPolicy) + `,`,
		`Manual:` + fmt.Sprintf("%v", this.Manual) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InternalState) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBufferedStarts := "[]*BufferedStart{"
	for _, f := range this.BufferedStarts {
		repeatedStringForBufferedStarts += strings.Replace(f.String(), "BufferedStart", "BufferedStart", 1) + ","
	}
	repeatedStringForBufferedStarts += "}"
	s := strings.Join([]string{`&InternalState{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`LastProcessedTime:` + strings.Replace(fmt.Sprintf("%v", this.LastProcessedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`BufferedStarts:` + repeatedStringForBufferedStarts + `,`,
		`LastCompletionResult:` + strings.Replace(fmt.Sprintf("%v", this.LastCompletionResult), "Payloads", "v11.Payloads", 1) + `,`,
		`ContinuedFailure:` + strings.Replace(fmt.Sprintf("%v", this.ContinuedFailure), "Failure", "v12.Failure", 1) + `,`,
		`ConflictToken:` + fmt.Sprintf("%v", this.ConflictToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartScheduleArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartScheduleArgs{`,
		`Schedule:` + strings.Replace(fmt.Sprintf("%v", this.Schedule), "Schedule", "v13.Schedule", 1) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "ScheduleInfo", "v13.ScheduleInfo", 1) + `,`,
		`InitialPatch:` + strings.Replace(fmt.Sprintf("%v", this.InitialPatch), "SchedulePatch", "v13.SchedulePatch", 1) + `,`,
		`State:` + strings.Replace(this.State.String(), "InternalState", "InternalState", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FullUpdateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FullUpdateRequest{`,
		`Schedule:` + strings.Replace(fmt.Sprintf("%v", this.Schedule), "Schedule", "v13.Schedule", 1) + `,`,
		`ConflictToken:` + fmt.Sprintf("%v", this.ConflictToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RefreshRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshRequest{`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DescribeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DescribeResponse{`,
		`Schedule:` + strings.Replace(fmt.Sprintf("%v", this.Schedule), "Schedule", "v13.Schedule", 1) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "ScheduleInfo", "v13.ScheduleInfo", 1) + `,`,
		`ConflictToken:` + fmt.Sprintf("%v", this.ConflictToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WatchWorkflowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WatchWorkflowRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "v11.WorkflowExecution", 1) + `,`,
		`LongPoll:` + fmt.Sprintf("%v", this.LongPoll) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WatchWorkflowResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WatchWorkflowResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`ResultFailure:` + fmt.Sprintf("%v", this.ResultFailure) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WatchWorkflowResponse_Result) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WatchWorkflowResponse_Result{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payloads", "v11.Payloads", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WatchWorkflowResponse_Failure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WatchWorkflowResponse_Failure{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v12.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartWorkflowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartWorkflowRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "StartWorkflowExecutionRequest", "v14.StartWorkflowExecutionRequest", 1) + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastCompletionResult:` + strings.Replace(fmt.Sprintf("%v", this.LastCompletionResult), "Payloads", "v11.Payloads", 1) + `,`,
		`ContinuedFailure:` + strings.Replace(fmt.Sprintf("%v", this.ContinuedFailure), "Failure", "v12.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartWorkflowResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartWorkflowResponse{`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`RealStartTime:` + strings.Replace(fmt.Sprintf("%v", this.RealStartTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelWorkflowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelWorkflowRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "v11.WorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TerminateWorkflowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TerminateWorkflowRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "v11.WorkflowExecution", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BufferedStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferedStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferedStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominalTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NominalTime == nil {
				m.NominalTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.NominalTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualTime == nil {
				m.ActualTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ActualTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverlapPolicy", wireType)
			}
			m.OverlapPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverlapPolicy |= v1.ScheduleOverlapPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Manual = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProcessedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastProcessedTime == nil {
				m.LastProcessedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastProcessedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferedStarts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BufferedStarts = append(m.BufferedStarts, &BufferedStart{})
			if err := m.BufferedStarts[len(m.BufferedStarts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCompletionResult == nil {
				m.LastCompletionResult = &v11.Payloads{}
			}
			if err := m.LastCompletionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuedFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContinuedFailure == nil {
				m.ContinuedFailure = &v12.Failure{}
			}
			if err := m.ContinuedFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConflictToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConflictToken = append(m.ConflictToken[:0], dAtA[iNdEx:postIndex]...)
			if m.ConflictToken == nil {
				m.ConflictToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartScheduleArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartScheduleArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartScheduleArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedule == nil {
				m.Schedule = &v13.Schedule{}
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &v13.ScheduleInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitialPatch == nil {
				m.InitialPatch = &v13.SchedulePatch{}
			}
			if err := m.InitialPatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InternalState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedule == nil {
				m.Schedule = &v13.Schedule{}
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConflictToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConflictToken = append(m.ConflictToken[:0], dAtA[iNdEx:postIndex]...)
			if m.ConflictToken == nil {
				m.ConflictToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = append(m.WorkflowId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedule == nil {
				m.Schedule = &v13.Schedule{}
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &v13.ScheduleInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConflictToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConflictToken = append(m.ConflictToken[:0], dAtA[iNdEx:postIndex]...)
			if m.ConflictToken == nil {
				m.ConflictToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchWorkflowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchWorkflowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchWorkflowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &v11.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongPoll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LongPoll = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchWorkflowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchWorkflowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchWorkflowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= v1.WorkflowExecutionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v11.Payloads{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResultFailure = &WatchWorkflowResponse_Result{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v12.Failure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResultFailure = &WatchWorkflowResponse_Failure{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartWorkflowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartWorkflowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartWorkflowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &v14.StartWorkflowExecutionRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCompletionResult == nil {
				m.LastCompletionResult = &v11.Payloads{}
			}
			if err := m.LastCompletionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuedFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContinuedFailure == nil {
				m.ContinuedFailure = &v12.Failure{}
			}
			if err := m.ContinuedFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartWorkflowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartWorkflowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartWorkflowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RealStartTime == nil {
				m.RealStartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.RealStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelWorkflowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelWorkflowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelWorkflowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &v11.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminateWorkflowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminateWorkflowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminateWorkflowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &v11.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
